/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2016 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

// ==================================================================================================================================
//	    __  __________  _____ _       ___           __
//	   / / / /_  __/  |/  / /| |     / (_)___  ____/ /___ _      __
//	  / /_/ / / / / /|_/ / / | | /| / / / __ \/ __  / __ \ | /| / /
//	 / __  / / / / /  / / /__| |/ |/ / / / / / /_/ / /_/ / |/ |/ /
//	/_/ /_/ /_/ /_/  /_/_____/__/|__/_/_/ /_/\__,_/\____/|__/|__/
//
// ==================================================================================================================================

// HTMLWindow is our "device wrapper" and in native ports such as iOS, Android, desktop
// and other pors, HTMLWindow exposes the device capabilities and receives the device
// events. Device Events are wrapped isnide an HTMLEvent object and passed to the game
// engine for further processing. In CocoEngine an HTMLEvent is processed and converted
// to a DEVICE_MESSAGE structure. Device messages stay available for 1 tick cycle before
// they are dismissed. During that tick cycle ITickable objects can retreive device
// messages directly from CocoEngine and handle them. Such handling can produce a CocoEvent
// which is the Coconut2D internal event mechanism.

callback HTMLWindowDispatchEvent(uid:Integer, eventType:String);

class HTMLWindow
{
	public var __uid:Integer;
	public var document:HTMLDocument;
	public var location:HTMLLocation;
	public var navigator:HTMLNavigator;
	public var screen:HTMLScreen;
	public var innerHeight:Integer;
	public var innerWidth:Integer;
	public var devicePixelRatio:Float;
	public var deviceRotation:Float;
	public var orientation:Integer;
	public var __elements:Array<Function>;
	public var e:HTMLEvent;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		devicePixelRatio = global.devicePixelRatio;
		innerHeight = global.innerHeight / global.devicePixelRatio;
		innerWidth = global.innerWidth / global.devicePixelRatio;

		e = new HTMLEvent;
		__elements = new Array<Function>;
		__uid = 0;
		orientation=0;
		deviceRotation=0;
		document = new HTMLDocument();
		location = new HTMLLocation();
		navigator = new HTMLNavigator();

		screen = new HTMLScreen();
		screen.availWidth = screen.width = innerWidth;
		screen.availHeight = screen.height = innerHeight;

		__registerManager(this, dispatchEvent);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete location;
		delete document;
		delete navigator;
		delete screen;
		delete __elements;
		delete e;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addEventListener(eventType:String, listener:Function, optional useCapture:Boolean)
	{
		__registerCallback(__uid, eventType);
		__elements[eventType] = listener;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function removeEventListener(eventType:String, listener:Function, optional useCapture:Boolean)
	{
		__elements[eventType] = null;
		__unRegisterCallback(__uid, eventType);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispatchEvent(uid:Integer, eventType:String)
	{
		// Receive arbirtrary event params that we will read from the arguments array.
		// We decide which event it is from the eventType string param.
		// All device wrappers should fire "load" event so that the application can start.

		var Callback:Function = __elements[eventType];
		if(Callback)
		{
			e.type 		= String(arguments[1]);
			e.timestamp = Time(arguments[2]);

			if(e.type=="keydown" || e.type=="keyup")
			{
				var keys:Array<Object> = arguments[3];
				e.keyCode = keys[0];
				e.shiftKey = keys[1];
				e.altKey = keys[2];
				e.ctrlKey = keys[3];

				//trace(String.fromCharCode(e.keyCode));
			}
			else if(e.type=="keypress")
			{
				var keys:Array<Integer> = arguments[3];
				e.keyCode = keys[0];
			}
			else
			{
				e.clientX = Float(arguments[4]) / global.devicePixelRatio;
				e.clientY = Float(arguments[5]) / global.devicePixelRatio;

				e.touches[0].clientX = e.clientX;
				e.touches[0].clientY = e.clientY;

				e.changedTouches[0].clientX	= e.clientX;
				e.changedTouches[0].clientY	= e.clientY;
			}

			Callback(e);
		}
	}
}

