#pragma export_native;
#pragma export_web;


// ==================================================================================================================================
//	   ______               ______          __  _____ __        __
//	  / ____/___  _________/_  __/__  _  __/ /_/ ___// /___  __/ /__
//	 / /   / __ \/ ___/ __ \/ / / _ \| |/_/ __/\__ \/ __/ / / / / _ \
//	/ /___/ /_/ / /__/ /_/ / / /  __/>  </ /_ ___/ / /_/ /_/ / /  __/
//	\____/\____/\___/\____/_/  \___/_/|_|\__//____/\__/\__, /_/\___/
//	                                                  /____/
// ==================================================================================================================================

class CocoTextStyle
{
	public var fontFamily:String;
	public var fontSizePixels:Integer;
	public var fontStyle:String;
	public var fontWeight:String;
	public var underline:Boolean;
	public var color:Array<Integer>;
	public var bgcolor:Array<Integer>;

	public function Constructor(ff:String, fsp:Integer, fs:String, fw:String, u:Boolean, r:Integer, g:Integer, b:Integer, a:Integer, br:Integer, bg:Integer, bb:Integer, ba:Integer)
	{
		fontFamily = ff;
		fontSizePixels = fsp;
		fontStyle = fs;
		fontWeight = fw;
		underline = u;
		color = new Array<Integer>;
		color.push(r);
		color.push(g);
		color.push(b);
		color.push(a);
		bgcolor = new Array<Integer>;
		bgcolor.push(br);
		bgcolor.push(bg);
		bgcolor.push(bb);
		bgcolor.push(ba);
	}

	public function Destructor()
	{
		delete color;
		delete bgcolor;
	}
}

// ==================================================================================================================================
//	   ______               ______          __
//	  / ____/___  _________/_  __/__  _  __/ /_
//	 / /   / __ \/ ___/ __ \/ / / _ \| |/_/ __/
//	/ /___/ /_/ / /__/ /_/ / / /  __/>  </ /_
//	\____/\____/\___/\____/_/  \___/_/|_|\__/
//
// ==================================================================================================================================

class CocoText
{
	public static var ctx:CanvasRenderingContext2D;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function npo2(i:Integer): Integer
	{
		--i;
		i |= i >> 1;
		i |= i >> 2;
		i |= i >> 4;
		i |= i >> 8;
		i |= i >> 16;
		return ++i;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function getFontSize(fontStyle:String):Integer
	{
		var fontSize:Integer;
		var spl:Array<String> = fontStyle.split(" ");
		for(var r:Integer = spl.size(); r--;)
		{
			var t:Integer = parseInt(spl[r]);
			if(t)
			{
				fontSize = t;
				break;
			}
		}
		delete spl;
		return fontSize;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function init(width:Integer, height:Integer)
    {
    	var canvas:HTMLCanvasElement = HTMLCanvasElement(document.createElement("canvas"));
    	canvas.width = Math.max(1, Math.floor(npo2(width)));
    	canvas.height = Math.max(1, Math.floor(npo2(height)));
    	ctx = CanvasRenderingContext2D(canvas.getContext("2d"));
    }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
    public static function drawSimpleText(ctx:CanvasRenderingContext2D, text:String,
    									  FontName:String, FontSizePx:Integer, FontBold:Boolean, FontItalic:Boolean, FontUnderline:Boolean, FontColor:Color,
    									  x:Integer, y:Integer, width:Integer, height:Integer,
    									  halign:Float, valign:Float,
    									  FontShadowX:Integer, FontShadowY:Integer, FontBlur:Integer, FontShadowColor:Color)
    {
		var R:Integer = (FontColor >> 16) & 0xFF;
		var G:Integer = (FontColor >> 8) & 0xFF;
		var B:Integer = FontColor & 0xFF;
		var A:Integer = (FontColor >> 24) & 0xFF;
		var color:String = "rgba(" + String(R) + ", " + String(G) + ", " + String(B) + ", " + String(A) + ")";
    	var fontStyle:String = (FontItalic ? "italic" : "normal") + " normal " + (FontBold ? "bold " : "normal ") + String(FontSizePx) + "px " + FontName;

    	var f:CocoText = new CocoText();
    	f.str = text;
    	f.indices.push(0);
    	f.mappings.push(0);
    	f.wrapSimple(width, fontStyle);
    	f.drawSimple(ctx, fontStyle, FontUnderline, color, x, y, width, height, halign, valign);
    	delete f;
    }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public var str:String;
	public var styles:Array<CocoTextStyle>;
	public var indices:Array<Integer>;
	public var mappings:Array<Integer>;
	public var lineBreaks:Array<Integer>;
	public var lineWidths:Array<Float>;
	public var lineHeights:Array<Float>;
	public var totalHeight:Float;
	public var lineSpacing:Float;

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
    public function Constructor()
    {
		ctx = null;
		str = "";
    	styles = new Array<CocoTextStyle>;
    	indices = new Array<Integer>;
    	mappings = new Array<Integer>;
		lineBreaks = new Array<Integer>;
		lineWidths = new Array<Float>;
		lineHeights = new Array<Float>;
		totalHeight = 0;
		lineSpacing = 1.25;
    }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
    public function Destructor()
    {
    	delete styles;
    	delete indices;
    	delete mappings;
    	delete lineBreaks;
    	delete lineWidths;
    	delete lineHeights;
    }

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function wrapSimple(width:Integer, fontStyle:String)
	{
		var fontSize:Integer = getFontSize(fontStyle);
		ctx.font = fontStyle;
		lineBreaks.clear();
		lineWidths.clear();
		lineHeights.clear();
		totalHeight = 0;
		var lastSpace:Integer = 0;
		var lastSpaceWidth:Float = 0;
		var lineWidth:Float = 0;
		var lineHeight:Float = 0;
		var L:Integer = indices.size();
		for(var i:Integer = 0; i<L; i++)
		{
			lineHeight = Math.max(lineHeight, fontSize);
			var to:Integer = i + 1 < indices.size() ? indices[i + 1] : str.size();
			for(var r:Integer = indices[i]; r < to; r++)
			{
				var chr:String = str.substr(r, 1);

	            var tm:HTMLTextMetrics = ctx.measureText(chr);
				var charWidth:Float = tm.width;
	            delete tm;

				if(chr == " ")
				{
					lastSpace = r;
					lineWidth += lastSpaceWidth;
					lastSpaceWidth = 0;
				}
				if(lineWidth + lastSpaceWidth + charWidth > width)
				{
					if(lineWidth === 0) return;
					lineBreaks.push(lastSpace);
					lineWidths.push(lineWidth);
					lineHeights.push(lineHeight);
					totalHeight += lineHeight * lineSpacing;
					lineWidth = 0;
					lineHeight = fontSize;
				}
				lastSpaceWidth += charWidth;
			}
		}
		lineWidths.push(lineWidth);
		lineHeights.push(lineHeight);
		totalHeight += lineHeight * lineSpacing;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawSimple(ctx:CanvasRenderingContext2D, fontStyle:String, underline:Boolean, color:String, x:Integer, y:Integer, width:Integer, height:Integer, halign:Float, valign:Float)
	{
		try
		{
			if(width > ctx.canvas.width || height > ctx.canvas.height) return;

			ctx.font = fontStyle;
			ctx.fillStyle = color;
			ctx.strokeStyle = color;

			var fontSize:Integer = getFontSize(fontStyle);
			if(totalHeight==0) totalHeight = fontSize;

			var cx:Float = x;
			var cy:Float = y;
			var currentLine:Integer = 0;
			var prevStop:Integer = 0;
			var firstChar:Boolean = true;
			var L:Integer = indices.size();

			for(var i:Integer = 0; i<L; i++)
			{
				var stop:Integer;
				var nextStop:Integer = ((i + 1 < indices.size()) ? indices[i + 1] : str.size());
				do
				{
					var nextBreak:Integer = currentLine < lineBreaks.size() ? lineBreaks[currentLine] : str.size();
					stop = Math.min(nextStop, nextBreak);
					var s:String = str.substring(prevStop, stop);
					if(firstChar) firstChar = false;
					prevStop = stop;

		            var tm:HTMLTextMetrics = ctx.measureText(s);
					var sWidth:Float = tm.width;
		            delete tm;

					var left:Float = (width - (lineWidths.size() > currentLine ? lineWidths[currentLine] : sWidth)) * halign;
					var top:Float = ((lineHeights.size() > currentLine ? lineHeights[currentLine] : totalHeight) / 1.125) + (height - totalHeight) * valign;
					ctx.fillText(s, cx + left, cy + top);
					if(underline)
					{
						ctx.lineWidth = fontSize / 12.0;
						ctx.beginPath();
						ctx.moveTo(cx + left, cy + top + ctx.lineWidth * 1.5);
						ctx.lineTo(cx + left + sWidth, cy + top + ctx.lineWidth * 1.5);
						ctx.stroke();
					}
					cx += sWidth;
					if(stop == nextBreak)
					{
						cx = x;
						cy += (lineHeights.size() > currentLine ? lineHeights[currentLine] : totalHeight) * lineSpacing;
						++currentLine;
						firstChar = true;
					}
				} while(stop != nextStop);
			}
		}
		catch(e:Error)
		{
			trace("ERROR: CocoText::drawSimple");
		}
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*
	public function wrap(width:Integer)
	{
		lineBreaks.clear();
		lineWidths.clear();
		lineHeights.clear();
		totalHeight = 0;
		var lineWidth:Float = 0;
		var lineHeight:Float = 0;
		var L:Integer = indices.size();
		for(var i:Integer = 0; i<L; i++)
		{
			var style:CocoTextStyle = styles[mappings[i]];
			lineHeight = Math.max(lineHeight, style.fontSizePixels);
			ctx.font = style.fontStyle + " normal " + style.fontWeight + " " + String(style.fontSizePixels) + "px " + style.fontFamily;
			var to:Integer = i + 1 < indices.size() ? indices[i + 1] : str.size();
			for(var r:Integer = indices[i]; r < to; r++)
			{
	            var tm:HTMLTextMetrics = ctx.measureText(str.substr(r, 1));
				var charWidth:Float = tm.width;
	            delete tm;

				if(lineWidth + charWidth > width)
				{
					if(lineWidth === 0) throw "Too small width!";
					lineBreaks.push(r);
					lineWidths.push(lineWidth);
					lineHeights.push(lineHeight);
					totalHeight += lineHeight * lineSpacing;
					lineWidth = charWidth;
					lineHeight = style.fontSizePixels;
				}
				else lineWidth += charWidth;
			}
		}
		lineWidths.push(lineWidth);
		lineHeights.push(lineHeight);
		totalHeight += lineHeight * lineSpacing;
	}

	/////////////////////////////////////////////////////////////////////////////////////////////////////////
	public function draw(width:Integer, height:Integer, halign:Float, valign:Float, bgR:Integer, bgG:Integer, bgB:Integer, bgA:Integer):String
	{
		if(width > ctx.canvas.width || height > ctx.canvas.height) return "";
		ctx.clearRect(0.0, 0.0, width, height);
		ctx.fillStyle = "rgba(" + String(bgR) + ", " + String(bgG) + ", " + String(bgB) + ", " + String(bgA) + ")";
		var cx:Float = 0;
		var cy:Float = 0;
		var currentLine:Integer = 0;
		var prevStop:Integer = 0;
		var firstChar:Boolean = true;
		var L:Integer = indices.size();
		for(var i:Integer = 0; i<L; i++)
		{
			var style:CocoTextStyle = styles[mappings[i]];
			ctx.font = style.fontStyle + " normal " + style.fontWeight + " " + String(style.fontSizePixels) + "px " + style.fontFamily;
			var stop:Integer;
			var nextStop:Integer = ((i + 1 < indices.size()) ? indices[i + 1] : str.size());
			do
			{
				var nextBreak:Integer = currentLine < lineBreaks.size() ? lineBreaks[currentLine] : str.size();
				stop = Math.min(nextStop, nextBreak);
				var s:String = str.substring(prevStop, stop);
				if(firstChar) firstChar = false;
				prevStop = stop;

	            var tm:HTMLTextMetrics = ctx.measureText(s);
				var sWidth:Float = tm.width;
	            delete tm;

				var left:Float = (width - lineWidths[currentLine]) * halign;
				var top:Float = (lineHeights[currentLine] / 1.125) + (height - totalHeight) * valign;
				ctx.fillStyle = "rgba(" + String(style.bgcolor[0]) + ", " + String(style.bgcolor[1]) + ", " + String(style.bgcolor[2]) + ", " + String(style.bgcolor[3]) + ")";
				ctx.fillRect(cx + left, cy + top - style.fontSizePixels / 1.25, sWidth, style.fontSizePixels * 1.125);
				var StyleString:String = "rgba(" + String(style.color[0]) + ", " + String(style.color[1]) + ", " + String(style.color[2]) + ", " + String(style.color[3]) + ")";
				ctx.fillStyle = StyleString;
				ctx.strokeStyle = StyleString;
				ctx.fillText(s, cx + left, cy + top);
				if(style.underline)
				{
					ctx.lineWidth = style.fontSizePixels / 12.0;
					ctx.beginPath();
					ctx.moveTo(cx + left, cy + top + ctx.lineWidth * 1.5);
					ctx.lineTo(cx + left + sWidth, cy + top + ctx.lineWidth * 1.5);
					ctx.stroke();
				}
				cx += sWidth;
				if(stop == nextBreak)
				{
					cx = 0;
					cy += lineHeights[currentLine] * lineSpacing;
					++currentLine;
					firstChar = true;
				}
			} while(stop != nextStop);
		}
		return ctx.canvas.toDataURL("image/png");
	}
	*/
}