/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2016 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#include "CanvasRenderingContext2D.jspp"

// ==================================================================================================================================
//	    __________                 ____                 __          ______            __            __
//	   /  _/ ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_
//	   / // /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/
//	 _/ // /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_
//	/___/\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/
//
// ==================================================================================================================================

class CocoRenderContext2D implements ICocoRenderContext
{
	private reference var __ctx:CanvasRenderingContext2D;

	private var __modelViewMatrix:CocoMatrix;
	private var __projectionMatrix:CocoMatrix;
	private var __modelViewMatrixCSS3:CocoMatrix;

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor(ctx:CanvasRenderingContext2D)
 	{
  		__ctx = ctx;

 		__ctx.globalCompositeOperation	  = "source-atop";
		__ctx.imageSmoothingEnabled       = false;
		__ctx.mozImageSmoothingEnabled    = false;
		__ctx.oImageSmoothingEnabled      = false;
		__ctx.webkitImageSmoothingEnabled = false;

		// set the size of the drawingBuffer
		__ctx.canvas.width = Math.round(engine.device.screenWidth * engine.device.pixelRatio);
		__ctx.canvas.height = Math.round(engine.device.screenHeight * engine.device.pixelRatio);

		// set the display size of the canvas
		__ctx.canvas.style.width  = String(engine.device.screenWidth)  + 'px';
		__ctx.canvas.style.height = String(engine.device.screenHeight) + 'px';
		__ctx.canvas.style.zIndex = 0;

		__ctx.scale(engine.device.pixelRatio, engine.device.pixelRatio);

 		__modelViewMatrix = new CocoMatrix();
		__projectionMatrix = new CocoMatrix();
		__modelViewMatrixCSS3 = new CocoMatrix();
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
 		delete __modelViewMatrix;
 		delete __projectionMatrix;
 		delete __modelViewMatrixCSS3;
 	}

 	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function getName():String									{ return "2D Canvas"; }
 	public function getType():COCO_RENDERING_CONTEXT_ENUM				{ return COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_2D_CANVAS; }
	public function getDisplayWidth():Integer							{ return Math.floor(__ctx.canvas.width / engine.device.pixelRatio); }
	public function getDisplayHeight():Integer							{ return Math.floor(__ctx.canvas.height / engine.device.pixelRatio); }
	public function getBufferWidth():Integer							{ return __ctx.canvas.width; }
	public function getBufferHeight():Integer							{ return __ctx.canvas.height; }
	public function getModelViewMatrix():CocoMatrix						{ return __modelViewMatrix; }
	public function getProjectionMatrix():CocoMatrix					{ return __projectionMatrix; }
	public function hide()												{ __ctx.canvas.style.visibility="hidden"; }
	public function show()												{ __ctx.canvas.style.visibility="visible"; }
	public function ready():Boolean										{ return true; }
	public function getHtmlElement():HTMLElement						{ return __ctx.canvas; }

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function cls()
	{
		__modelViewMatrix.identity();
		__ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		//__ctx.fillStyle = "#ffffff";
		//__ctx.fillRect(0.0, 0.0, getDisplayWidth(), getDisplayHeight());
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function clip(x:Integer, y:Integer, w:Integer, h:Integer)
	{
		try
		{
			__ctx.rect(x,y,w,h);
			__ctx.clip();
		}
		catch(e:Error)
		{
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function flush()
 	{
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(viewScale:Float)
	{
		clip(0,0,0,0);

		// set the display size of the canvas.
		__ctx.canvas.style.width = String(engine.device.screenWidth) + "px";
		__ctx.canvas.style.height = String(engine.device.screenHeight) + "px";

		// set the size of the drawingBuffer
		__ctx.canvas.width = Math.round(engine.device.screenWidth * engine.device.pixelRatio);
		__ctx.canvas.height = Math.round(engine.device.screenHeight * engine.device.pixelRatio);

		__ctx.setTransform(1.0, 0.0, 0.0, 1.0, 0.0, 0.0);
		__ctx.scale(engine.device.pixelRatio, engine.device.pixelRatio);

		__projectionMatrix.identity();
		__projectionMatrix.translate(getBufferWidth()/2.0, getBufferHeight()/2.0);
		__projectionMatrix.scale(viewScale*engine.device.pixelRatio, viewScale*engine.device.pixelRatio);

		__modelViewMatrix.identity();

		engine.device.report();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareVideoFrame(image:CocoImage, video:HTMLVideoElement):CocoImage
	{
		return image;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareImage(img:CocoImage):ICocoImageRenderData
	{
		img.resizeToOptimalTextureSize();
		return new CocoImageRenderData2D();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareClip(clip:CocoClip)
	{
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function apply(clip:CocoClip, keyFrame:CocoKeyFrame, matrix:CocoMatrix)
	{
		if(!clip || !keyFrame || !matrix) return;

	 	if(keyFrame.x!=0 || keyFrame.y!=0)	 			matrix.translate(keyFrame.x, keyFrame.y);
	 	if(keyFrame.scaleX!=1 ||keyFrame.scaleY!=1) 	matrix.scale(keyFrame.scaleX, keyFrame.scaleY);
	 	if(keyFrame.rotation!=0) 						matrix.rotateZ(keyFrame.rotation * RADIANS);
	 	if(keyFrame.pivotX!=0 || keyFrame.pivotY!=0) 	matrix.translate(-keyFrame.pivotX, -keyFrame.pivotY);

		// For Facebook/Twitter popups a clip might have a HTML5 DIV/A
		// overlay element for handling clicks and initiating popup windows.
		// We need to place the DIV/A on top of the clip.

		if(clip.__ANCHOR && matrix==__modelViewMatrix)
		{
			clip.__ANCHOR.style.opacity = keyFrame.visible ? keyFrame.alpha : 0;

			__modelViewMatrixCSS3.copyFrom(__modelViewMatrix.__m);
			__modelViewMatrixCSS3.translate(-(clip.__image.textureCellWidth/clip.__image.pixelRatio)/2, -(clip.__image.textureCellHeight/clip.__image.pixelRatio)/2);
			__modelViewMatrixCSS3.multiplyByMatrix(__projectionMatrix, true, true);
			__modelViewMatrixCSS3.__m.rc34 = 1000+clip.__zIndex;
			clip.__ANCHOR.style.webkitTransform = clip.__ANCHOR.style.transform = __modelViewMatrixCSS3.toCSS3D(true);
			clip.__ANCHOR.style.zIndex = 1000+clip.__zIndex;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function hideClipCanvas(clip:CocoClip):Boolean
	{
		if(!clip) return false;

		var layout_changed:Boolean = false;

		for(var i:Integer=clip.__children.size()-1; i>=0; i--)
		{
			var DIV:HTMLElement = document.getElementById(clip.__children[i].__uniqueID);
			if(DIV)
			{
				DIV.parentNode.removeChild(DIV);
				layout_changed = true;
			}
			layout_changed |= hideClipCanvas(clip.__children[i]);
		}

		return layout_changed;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer)
	{
		if(!image || !image.hImage) return;

		if(keyFrame.alpha==0 || !keyFrame.visible) return;

		__ctx.save();

		// Initialize Canvas transformation from Projection Matrix
		__ctx.setTransform(__projectionMatrix.__m.rc11,
						   __projectionMatrix.__m.rc12,
						   __projectionMatrix.__m.rc21,
						   __projectionMatrix.__m.rc22,
						   __projectionMatrix.__m.rc41,
						   __projectionMatrix.__m.rc42);

		// Load Model View Matrix
		__ctx.transform(__modelViewMatrix.__m.rc11,
					    __modelViewMatrix.__m.rc12,
					    __modelViewMatrix.__m.rc21,
					    __modelViewMatrix.__m.rc22,
					    Math.floor(__modelViewMatrix.__m.rc41),
					    Math.floor(__modelViewMatrix.__m.rc42));

		// Scale for image pixel ratio
		if(image.pixelRatio!=1)
		{
			__ctx.scale(1/image.pixelRatio, 1/image.pixelRatio);
		}

		// Calculate image copy rectangles
		/*
		var sw:Float = image.textureCellWidth;
		var sh:Float = image.textureCellHeight;
		var ox:Float = image.binpackX;
		var oy:Float = image.binpackY;
		var sx:Float = ox + ((keyFrame.flipH ? 1.0 : 0.0) + image.textureGrid[textureIndex * 2 + 1]) * sw;
		var sy:Float = oy + ((keyFrame.flipV ? 1.0 : 0.0) + image.textureGrid[textureIndex * 2 + 0]) * sh;
		var dx:Float = -sw / 2.0;
		var dy:Float = -sh / 2.0;
		var dw:Float = sw;
		var dh:Float = sh;
		*/

		var sw:Integer = image.textureCellWidth;
		var sh:Integer = image.textureCellHeight;
		var ox:Integer = image.binpackX;
		var oy:Integer = image.binpackY;
		var sx:Integer = ox + ((keyFrame.flipH ? 1.0 : 0.0) + image.textureGrid[textureIndex * 2 + 1]) * sw;
		var sy:Integer = oy + ((keyFrame.flipV ? 1.0 : 0.0) + image.textureGrid[textureIndex * 2 + 0]) * sh;
		var dx:Integer = -sw / 2.0;
		var dy:Integer = -sh / 2.0;
		var dw:Integer = sw;
		var dh:Integer = sh;

		// Set global alpha
		__ctx.globalAlpha = keyFrame.alpha;

		// Some mobile browsers produce DOM errors if parameters are out of bounds.
		try
		{
			if(sx >= 0 && sy >= 0 && sw > 0 && sh > 0 && sx + sw <= image.hImage.naturalWidth && sy + sh <= image.hImage.naturalHeight && sx + sw > 0 && sy + sh > 0)
				__ctx.drawImage(image.hImage, sx, sy, sw, sh, dx, dy, dw, dh);
		}
		catch(e:Error)
		{
			trace("ERROR: __ctx.drawImage()");
		}

		__ctx.restore();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskBegin()
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskEnd(invert:Boolean)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(clip:CocoClip)
	{
	}
}
