/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2016 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#include "CanvasRenderingContext2D.jspp"

// ==================================================================================================================================
//	   ______                _____
//	  / ____/___  _________ / ___/___  ____ ___  _____  ____  ________
//	 / /   / __ \/ ___/ __ \\__ \/ _ \/ __ `/ / / / _ \/ __ \/ ___/ _ \
//	/ /___/ /_/ / /__/ /_/ /__/ /  __/ /_/ / /_/ /  __/ / / / /__/  __/
//	\____/\____/\___/\____/____/\___/\__, /\__,_/\___/_/ /_/\___/\___/
//	                                   /_/
// ==================================================================================================================================

class CocoSequence
{
	public var name:String;
	public var frames:Array<Integer>;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor(name:String, framesArray:Array<Integer>)
	{
		this.name = name;
		this.frames = framesArray;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete frames;
	}
}

// ==================================================================================================================================
//	   ______                 ____                          _____ _ __    ___
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____ / ___/(_) /_  / (_)___  ____ _
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \\__ \/ / __ \/ / / __ \/ __ `/
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/__/ / / /_/ / / / / / / /_/ /
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/____/_/_.___/_/_/_/ /_/\__, /
//	                                          /____/                            /____/
// ==================================================================================================================================

class CocoImageResolution
{
	// Image Data
	public var url:String;
	public var pixelRatio:Float;

	// Texture Data
	public var textureCellWidth:Float;
	public var textureCellHeight:Float;

	// Binpack Data
	public reference var binpack:CocoImage;
	public var binpackX:Float;
	public var binpackY:Float;

	// Skin Data
	public reference var skin:Float32Array;  // W1, W2, W3, H1, H2, H3

	// Compressed Tiled Layer Data
	public var tileWidth:Float;
	public var tileHeight:Float;
	public var tileMap:Int32Array;

	public function Constructor(url:String, pixelRatio:Float, textureWidth:Float, textureHeight:Float, tileWidth:Float, tileHeight:Float, tileMap:Int32Array, optional binpack:CocoImage, optional binpackX:Float, optional binpackY:Float, optional skin:Float32Array)
	{
		this.url = url;
		this.binpack = binpack;
		this.binpackX = binpackX;
		this.binpackY = binpackY;
		this.pixelRatio = pixelRatio;
		this.textureCellWidth = textureWidth;
		this.textureCellHeight = textureHeight;
		this.tileWidth = tileWidth;
		this.tileHeight = tileHeight;
		this.tileMap = tileMap;
		this.skin = skin;
	}

	public function Destructor()
	{
		delete tileMap;
	}
}

// ==================================================================================================================================
//	    __________                 ____                           ____                 __          ____        __
//	   /  _/ ____/___  _________  /  _/___ ___  ____ _____ ____  / __ \___  ____  ____/ /__  _____/ __ \____ _/ /_____ _
//	   / // /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ / / / __ `/ __/ __ `/
//	 _/ // /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/ _, _/  __/ / / / /_/ /  __/ /  / /_/ / /_/ / /_/ /_/ /
//	/___/\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/_/ |_|\___/_/ /_/\__,_/\___/_/  /_____/\__,_/\__/\__,_/
//	                                               /____/
// ==================================================================================================================================

interface ICocoImageRenderData
{
	public function castRenderDataGL():CocoImageRenderDataGL;
	public function castRenderData2D():CocoImageRenderData2D;
}

// ==================================================================================================================================
//	   ______                 ____                           ____                 __          ____        __       ___   ____
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____  / __ \___  ____  ____/ /__  _____/ __ \____ _/ /_____ |__ \ / __ \
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ / / / __ `/ __/ __ `/_/ // / / /
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/ _, _/  __/ / / / /_/ /  __/ /  / /_/ / /_/ / /_/ /_/ / __// /_/ /
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/_/ |_|\___/_/ /_/\__,_/\___/_/  /_____/\__,_/\__/\__,_/____/_____/
//	                                          /____/
// ==================================================================================================================================

class CocoImageRenderData2D implements ICocoImageRenderData
{
	public var imageData:ImageData;

	public function Constructor()
	{
		imageData = null;
	}

	public function Destructor()
	{
		delete imageData;
	}

	public function castRenderDataGL():CocoImageRenderDataGL
	{
		return null;
	}

	public function castRenderData2D():CocoImageRenderData2D
	{
		return this;
	}
}

// ==================================================================================================================================
//	   ______                 ____                           ____                 __          ____        __        ________
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____  / __ \___  ____  ____/ /__  _____/ __ \____ _/ /_____ _/ ____/ /
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ / / / __ `/ __/ __ `/ / __/ /
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/ _, _/  __/ / / / /_/ /  __/ /  / /_/ / /_/ / /_/ /_/ / /_/ / /___
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/_/ |_|\___/_/ /_/\__,_/\___/_/  /_____/\__,_/\__/\__,_/\____/_____/
//	                                          /____/
// ==================================================================================================================================

class CocoImageRenderDataGL implements ICocoImageRenderData
{
	public reference var gl:WebGLRenderingContext;

	public var texture: WebGLTexture;
	public var buffer: WebGLBuffer;
	public var drawType:Integer;
	public var vertexCount:Integer;

	public function Constructor()
	{
		drawType = 0;
		vertexCount = 0;
		texture = null;
		buffer = null;
	}

	public function Destructor()
	{
		if(gl)
		{
			gl.bindTexture(gl.TEXTURE_2D, null);
			gl.deleteTexture(texture);
			gl.bindBuffer(gl.ARRAY_BUFFER, null);
			gl.deleteBuffer(buffer);
		}

		delete texture;
		delete buffer;
		gl=null;
	}

	public function castRenderDataGL():CocoImageRenderDataGL
	{
		return this;
	}

	public function castRenderData2D():CocoImageRenderData2D
	{
		return null;
	}
}

// ==================================================================================================================================
//	   ______                 ____
//	  / ____/___  _________  /  _/___ ___  ____ _____ ____
//	 / /   / __ \/ ___/ __ \ / // __ `__ \/ __ `/ __ `/ _ \
//	/ /___/ /_/ / /__/ /_/ // // / / / / / /_/ / /_/ /  __/
//	\____/\____/\___/\____/___/_/ /_/ /_/\__,_/\__, /\___/
//	                                          /____/
// ==================================================================================================================================

class CocoImage
{
	public var symbolName:String;
	public var hImage:Image;

	public reference var scene:CocoScene;

	// BinPacked
	public reference var binpack:CocoImage;
	public var binpackX:Float;
	public var binpackY:Float;

	// Texture
	public var textureCellWidth:Float;
	public var textureCellHeight:Float;
	public var textureGrid:Float32Array;
	public var textureTileMap:Float32Array;
	public var color:Float32Array;
	public var texSize:Float32Array;
	public var isSpriteSheet:Boolean;

	// Sprite
	public var sequences:Array<CocoSequence>;

	// Skin
	public var skin:Float32Array;  // W1, W2, W3, H1, H2, H3

	// Tiled Layer
	public var tileWidth:Integer;
	public var tileHeight:Integer;
	public var tileMap:Int32Array;

	// Render
	public var renderData:ICocoImageRenderData;
	public var onLoadResizeWidth:Integer;
	public var onLoadResizeHeight:Integer;

	// Resolution Siblings
	public var baseUrl:String;
	public var textureViewWidth:Float;
	public var textureViewHeight:Float;
	public var textureViewScaleX:Float;
	public var textureViewScaleY:Float;
	public var viewSiblings:Array<CocoImageResolution>;
	public var pixelRatio:Float;
	public var scaleX:Float;
	public var scaleY:Float;

	// Shared Image
	public var shared:Boolean;
	public var refCount:Integer;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public static function createFromURL(url:String, optional resizeWidth:Integer, optional resizeHeight:Integer):CocoImage
	{
		var img:CocoImage = new CocoImage();
		img.textureCellWidth = 0;
		img.textureCellHeight = 0;
		img.pixelRatio = 1;
		img.tileWidth = 0;
		img.tileHeight = 0;
		img.tileMap = null;
		img.hImage = new Image();
		img.hImage.load(url, img);
		img.onLoadResizeWidth = resizeWidth;
		img.onLoadResizeHeight = resizeHeight;
		return img;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		scene				= null;
		renderData			= null;
		baseUrl				= "";
		color				= null;
		hImage				= null;
		isSpriteSheet		= false;
		pixelRatio			= 1.0;
		scaleX				= 0.0;
		scaleY				= 0.0;
		sequences			= new Array<CocoSequence>;
		skin				= null;
		tileWidth			= 0;
		tileHeight			= 0;
		tileMap				= null;
		symbolName			= "";
		texSize				= null;
		textureCellHeight	= 0;
		textureCellWidth	= 0;
		textureGrid			= null;
		textureTileMap		= null;
		onLoadResizeWidth	= 0;
		onLoadResizeHeight	= 0;
		viewSiblings		= new Array<CocoImageResolution>;
		binpack				= null;
		binpackX			= 0;
		binpackY			= 0;
		textureViewWidth	= 0;
		textureViewHeight	= 0;
		textureViewScaleX	= 1;
		textureViewScaleY	= 1;
		refCount 			= 0;
		shared 				= false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		scene = null;
		delete viewSiblings;
		delete sequences;
		delete textureGrid;
		delete textureTileMap;
		delete color;
		delete texSize;
		delete renderData;
		delete hImage;
		delete skin;
		delete tileMap;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addRef():Integer
	{
		shared = true;
		refCount++;
		return refCount;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function release():Integer
	{
		if(shared && refCount>0)
			refCount--;
		return refCount;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function dispose()
	{
		//trace("Dispose texture: " + hImage.id);

		if(renderData)
			delete renderData;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __error(hImage:Image):Boolean
	{
		return true; // Retry
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function __loaded(hImage:Image)
	{
		if(onLoadResizeWidth>0 || onLoadResizeHeight>0 || textureCellWidth==0 || textureCellHeight==0)
		{
			var w:Integer = onLoadResizeWidth!=0 ? onLoadResizeWidth : hImage.naturalWidth;
			var h:Integer = onLoadResizeHeight!=0 ? onLoadResizeHeight : hImage.naturalHeight;
			var pot:Boolean = engine.__ctx.getType()==COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_WEBGL;
			var canvas:HTMLCanvasElement = CocoGraphics.NewCanvas(w, h, pot);
			var ctx:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));
			ctx.drawImage(hImage, 0, 0, hImage.naturalWidth, hImage.naturalHeight, 0, 0, w, h);
			delete hImage;
			onLoadResizeWidth = 0;
			onLoadResizeHeight = 0;
			this.createFromCanvas(canvas, w, h);
			delete canvas;
		}
		else
		{
			loaded();
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFromCanvas(canvas:HTMLCanvasElement, width:Integer, height:Integer)
	{
		createFromBase64(canvas.toDataURL("image/png"));
        textureCellWidth = width;
        textureCellHeight = height;
        textureViewWidth = width;
        textureViewHeight = height;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function createFromBase64(url:String, optional width:Integer, optional height:Integer)
	{
		delete hImage;
        hImage = new Image();
        hImage.load(url, this);
        textureCellWidth = width!=0 ? width : hImage.width;
        textureCellHeight = height!=0 ? height : hImage.height;
        textureViewWidth = textureCellWidth;
        textureViewHeight = textureCellHeight;
        pixelRatio = 1.0;
        textureGrid = new Float32Array([0,0]);
        if(hImage.complete)
			this.renderData = engine.__ctx.prepareImage(this);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addResolution(sibling:CocoImageResolution) :CocoImageResolution
	{
		viewSiblings.push(sibling);
		return sibling;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function addSequence(sequence:CocoSequence) :CocoSequence
	{
		if(!sequence) return null;
		if(getSequence(sequence.name)) throw "Sequence " + sequence.name + " already exists.";
		sequences.push(sequence);
		isSpriteSheet = true;
		return sequence;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function getSequence(name:String) :CocoSequence
	{
		for (var i:Integer = sequences.size() - 1; i >= 0; i--)
		{
			if(sequences[i].name == name)
				return sequences[i];
		}
		return null;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function load()
	{
		//                   |  Image |  Aspect |   Logical   |              | Pixel |   Physical    |         | Screen |    Max       |
		// 	Device           |  x-dpi |   Ratio |  Resolution |  Resolution  | Ratio |    Pixels     |   PPi   |  Size  |   Texture    |
		// =============================================================================================================================
		// iPhone 6 Plus     | xxhdpi |    16:9 |  736x414 pt | 2208x1242 px |    3x | 1920x1080 ppx | 401 ppi |   5.5" | 4096x4096 px |
		// iPhone 6          |  xhdpi |    16:9 |  667x375 pt |  1334x750 px |    2x |  1334x750 ppx | 326 ppi |   4.7" | 4096x4096 px |
		// iPhone 5/5C/5S    |  xhdpi |    16:9 |  568x320 pt |  1136x640 px |    2x |  1136x640 ppx | 326 ppi |   4.0" | 2048x2048 px |
		// iPhone 4          |  xhdpi |    16:9 |  480x320 pt |   960x640 px |    2x |   960x640 ppx | 326 ppi |   3.5" | 2048x2048 px |
		// iPhone 3GS        |   mdpi |    16:9 |  480x320 pt |   480x320 px |    1x |   480x320 ppx | 163 ppi |   3.5" | 2048x2048 px |
		// iPad				 |   mdpi |     4:3 | 1024x768 pt |  1024x768 px |    1x |  1024x768 ppx | 132 ppi |   9.7" | 2048x2048 px |
		// iPad 2            |   mdpi |     4:3 | 1024x768 pt |  1024x768 px |    1x |  1024x768 ppx | 132 ppi |   9.7" | 2048x2048 px |
		// iPad 3            |  xhdpi |     4:3 | 1024x768 pt | 2048x1536 px |    2x | 2048x1536 ppx | 132 ppi |   9.7" | 2048x2048 px |
		// iPad Mini         |   mdpi |     4:3 | 1024x768 pt |  1024x768 px |    1x |  1024x768 ppx | 132 ppi |   7.9" | 2048x2048 px |
		// iPad Air          |  xhdpi |     4:3 | 1024X768 pt | 2048x1536 px |    2x | 2048x1536 ppx | 264 ppi |   9.7" | 4096x4096 px |
		// iPad Mini Retina  |  xhdpi |     4:3 | 1024X768 pt | 2048x1536 px |    2x | 2048x1536 ppx | 326 ppi |   7.9" | 4096x4096 px |

		// ============================================================
		// For mobile browsers we always load mdpi images to save memory
		// ============================================================
		if(engine.device.isMobileHTML5Browser && !engine.device.isIPhone5)
		{
			if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi))
				return;
		}

		switch(engine.__IMAGE_LOADING_MODE)
		{
			// ============================================================
			// Load image by device dpi designation
			// ============================================================
			case COCO_IMAGE_LOADING_MODE_ENUM.LOAD_BY_DPI:
			{
				switch(engine.device.type)
				{
				case COCO_DEVICE.DEVICE_GENERIC_LDPI:       if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_ldpi)) 	 	{return;} break;
				case COCO_DEVICE.DEVICE_GENERIC_MDPI:		if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi))   	{return;} break;
				case COCO_DEVICE.DEVICE_GENERIC_TVDPI:      if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_tvdpi))  	{return;} break;
				case COCO_DEVICE.DEVICE_GENERIC_HDPI:       if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_hdpi))   	{return;} break;
				case COCO_DEVICE.DEVICE_GENERIC_XHDPI:      if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi))  	{return;} break;
				case COCO_DEVICE.DEVICE_GENERIC_XXHDPI:     if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xxhdpi)) 	{return;} break;

				case COCO_DEVICE.DEVICE_IPHONE_3GS:         if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi)) 		{return;} break;
				case COCO_DEVICE.DEVICE_IPAD:               if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi)) 		{return;} break;
				case COCO_DEVICE.DEVICE_IPAD_2:             if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi)) 		{return;} break;
				case COCO_DEVICE.DEVICE_IPAD_MINI:          if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_mdpi)) 		{return;} break;

				case COCO_DEVICE.DEVICE_IPHONE_4:           if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPHONE_4S:          if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPHONE_5:           if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPHONE_5S:          if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPHONE_5C:          if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPHONE_6:           if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;

				case COCO_DEVICE.DEVICE_IPHONE_6_PLUS:      if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xxhdpi)) 	{return;} break;

				case COCO_DEVICE.DEVICE_IPAD_3:             if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi))		{return;} break;
				case COCO_DEVICE.DEVICE_IPAD_AIR:           if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				case COCO_DEVICE.DEVICE_IPAD_MINI_RETINA:	if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_xhdpi)) 	{return;} break;
				}
			}
			break;

			// ============================================================
			// Load image by keyframe analysis
			// ============================================================
			case COCO_IMAGE_LOADING_MODE_ENUM.LOAD_BY_EXMINING_KEYFRAMES:
			{
				var LastImg:CocoImageResolution;
				var UseImg:CocoImageResolution;

				// Image optimal width and height where calculated for scene's fixed viewport.
				// We multiply with scene's view scale to calculate the image's desired size.

		        // Calculate the optimal (desired) image size from mdpi
		        var sw:Integer = Math.floor(textureViewWidth * scaleX);
		        var sh:Integer = Math.floor(textureViewHeight * scaleY);

		        // Scan siblings to find the closest image
		        if(textureViewScaleX >= 1.0 && textureViewScaleY >= 1.0)
		        {
		            for(var i:Integer=0;i<viewSiblings.size();i++)
		            {
		                var img:CocoImageResolution = viewSiblings[i];
	                    LastImg = img;
	                    if(img.textureCellWidth >= sw && img.textureCellHeight >= sh)
	                    {
	                        UseImg = img;
	                        break;
	                    }
		            }
		        }
		        else
		        {
		            for(var i:Integer=viewSiblings.size()-1; i>=0; i--)
		            {
		                var img:CocoImageResolution = viewSiblings[i];
						LastImg = img;
	                    if(sw >= img.textureCellWidth && sh >= img.textureCellHeight)
	                    {
	                        UseImg = img;
		                    break;
	                    }
		            }
		        }

		        setResolution(UseImg ? UseImg : LastImg);

			}
			break;
		}

		// ============================================================
		// Fallback to best (last) sibling image
		// ============================================================
		if(!hImage && !renderData)
		{
			setResolution(viewSiblings[viewSiblings.size()-1]);
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function loadImageByDpi(dpi:SCREEN_RESOLUTION_DPI_ENUM, optional strict:Boolean):Boolean
	{
		var i:Integer;
		var d:Integer;
		var r:Float = CocoGraphics.DpiToPixelRatio(dpi);

		// First try to find image by exact dpi
		for(i = 0; i<viewSiblings.size(); i++)
		{
			if(viewSiblings[i].pixelRatio==r)
			{
				setResolution(viewSiblings[i]);
				return true;
			}
		}
		if(strict) return false;

		// Try to find closer dpi images with better quality
		for(d=dpi; d<SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_MAX_DPI; d++)
		{
			if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM(d), true)) return true;
		}

		// Try to find closer dpi images with less quality
		for(d=dpi; d>=SCREEN_RESOLUTION_DPI_ENUM.RESOLUTION_MIN_DPI; d--)
		{
			if(loadImageByDpi(SCREEN_RESOLUTION_DPI_ENUM(d), true)) return true;
		}

		// No image found, try for no-dpi
		for(i = 0; i<viewSiblings.size(); i++)
		{
			if(viewSiblings[i].pixelRatio==0)
			{
				setResolution(viewSiblings[i]);
				return true;
			}
		}

		// No image could be loaded by dpi processing.
		return false;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	private function setResolution(sibling:CocoImageResolution)
	{
		if(!sibling) return;

		if(sibling.binpack && sibling.binpack.hImage && sibling.pixelRatio==sibling.binpack.pixelRatio)
		{
			//trace("Linking to Binpack: " + sibling.url);

			hImage = sibling.binpack.hImage;

			binpack 	= sibling.binpack;
			binpackX 	= sibling.binpackX;
			binpackY 	= sibling.binpackY;
		}
		else
		{
			//trace("Loading image: " + sibling.url);

			hImage = new Image();
			hImage.load(baseUrl + sibling.url);
		}

		pixelRatio 			= sibling.pixelRatio;

		textureCellWidth 	= sibling.textureCellWidth;
		textureCellHeight 	= sibling.textureCellHeight;

		skin				= sibling.skin;

		tileWidth 			= sibling.tileWidth;
		tileHeight 			= sibling.tileHeight;
		tileMap 			= sibling.tileMap;

		loaded();
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function loaded():Boolean
	{
		if(renderData) return true;
		if(!hImage || !hImage.complete) return false;
		renderData = engine.__ctx.prepareImage(this);

		// On WebGL we can safely delete the image to save memory.
		//if(!binpack && (isSpriteSheet || !skin) && engine.__ctx.getType()==COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_WEBGL)
		if(!binpack && isSpriteSheet && engine.__ctx.getType()==COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_WEBGL)
		{
			delete hImage;
		}

		return true;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function unload()
	{
		delete hImage;
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function resizeToOptimalTextureSize()
	{
		/*
		if(engine.__RESIZE_IMAGES_AT_RUNTIME && !binpack && textureCellWidth>=engine.device.screenWidth && !isSpriteSheet && scaleX > 0.0 && scaleY > 0.0 && scaleX!=1.0 && scaleY!=1.0)
		{
			var pot:Boolean = engine.__ctx.getType()==COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_WEBGL;
			var w:Integer = Math.floor(textureCellWidth * scaleX / pixelRatio);
			var h:Integer = Math.floor(textureCellHeight * scaleY / pixelRatio);
			var canvas:HTMLCanvasElement = CocoGraphics.NewCanvas(w, h, pot);
			var c2d:CanvasRenderingContext2D = CanvasRenderingContext2D(canvas.getContext("2d"));

			//trace("Scaling texture to " + String(w) + "x" + String(h) + " (x" + String(scaleX / pixelRatio) + ", x" + String(scaleY / pixelRatio) + ", @" + String(pixelRatio) + "): " + symbolName);

			if(!hImage.__imageData || engine.device.isHTML5Browser)
			{
				c2d.imageSmoothingEnabled = true;
				c2d.mozImageSmoothingEnabled = true;
				c2d.oImageSmoothingEnabled = true;
				c2d.webkitImageSmoothingEnabled = true;

				c2d.drawImage(hImage, 0, 0, textureCellWidth, textureCellHeight, 0, 0, w, h);
			}
			else
			{
				var dt:ImageData = CocoImage.LanczosResize(hImage.__imageData, textureCellWidth, textureCellHeight, w, h);
				c2d.putImageData(dt, 0, 0);
				delete dt;
			}

			delete hImage;
			hImage = new Image();
			hImage.load(canvas.toDataURL("image/png"));

			if(pot)
			{
				textureCellWidth = w;
				textureCellHeight = h;
			}
			delete canvas;
		}
		*/
	}

}
