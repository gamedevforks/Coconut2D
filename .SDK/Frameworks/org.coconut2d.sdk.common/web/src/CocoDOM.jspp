/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.yourcompany.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;
#pragma export_nodejs;

#module org.coconut2d.sdk.common;

// ==================================================================================================================================
//	   ______               _    __           _             __
//	  / ____/___  _________| |  / /___ ______(_)___ _____  / /_
//	 / /   / __ \/ ___/ __ \ | / / __ `/ ___/ / __ `/ __ \/ __/
//	/ /___/ /_/ / /__/ /_/ / |/ / /_/ / /  / / /_/ / / / / /_
//	\____/\____/\___/\____/|___/\__,_/_/  /_/\__,_/_/ /_/\__/
//
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////////
export enum COCO_VARTYPE
{
	CVT_UNKNOWN		= 0,
	CVT_EMPTY		= 1,
	CVT_NULL		= 2,
	CVT_INTEGER		= 4,
	CVT_FLOAT		= 8,
	CVT_TIME		= 16,
	CVT_DATE		= 32,
	CVT_STRING		= 64,
	CVT_BOOLEAN		= 128,
	CVT_OBJECT		= 1024,
	CVT_ARRAY		= 2048
}

///////////////////////////////////////////////////////////////////////////////////////////////////
export struct CocoVariant
{
	vt:COCO_VARTYPE;
	iVal:Integer;
	fVal:Float;
	tVal:Time;
	dVal:Date;
	sVal:String;
	bVal:Boolean;
	oVal:Object;
	aiVal:Array<Integer>;
	afVal:Array<Float>;
	atVal:Array<Time>;
	adVal:Array<Date>;
	asVal:Array<String>;
	abVal:Array<Boolean>;
	aoVal:Array<Object>;
}

// ==================================================================================================================================
//	   ______               ______      __              _
//	  / ____/___  _________/_  __/___  / /_____  ____  (_)___  ___  _____
//	 / /   / __ \/ ___/ __ \/ / / __ \/ //_/ _ \/ __ \/ /_  / / _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / / / /_/ / ,< /  __/ / / / / / /_/  __/ /
//	\____/\____/\___/\____/_/  \____/_/|_|\___/_/ /_/_/ /___/\___/_/
//
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////////
export enum TOKEN_KIND_ENUM
{
	TOKEN_EOF			= 1,
	TOKEN_WHITESPACE	= 2,
	TOKEN_COMMENT		= 3,
	TOKEN_OPERATOR		= 4,
	TOKEN_NUMBER		= 5,
	TOKEN_STRING		= 6,
	TOKEN_KEYWORD		= 7,
	TOKEN_IDENTIFIER	= 8,
	TOKEN_TEXT			= 9
}

///////////////////////////////////////////////////////////////////////////////////////////////////
export struct TOKEN_RULE
{
	name:String;
	pattern:String;
	kind:TOKEN_KIND_ENUM;
	rx:RegExp;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
export struct TOKEN
{
	type:String;
	value:String;
	start:Integer;
	end:Integer;
	line_start:Integer;
	line_end:Integer;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
struct COCO_PARSER_STATE
{
	cursor:Integer;
	tokenIndex:Integer;
	lookahead:Integer;
	scanNewlines:Boolean;
	line_start:Integer;
	scopeId:Integer;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
export class CocoTokenizer
{
	public var HAS_COMMENTS_RULE:Boolean;
	public var tokenRules:Array<TOKEN_RULE>;
	public var tokenRulesPrecedence:Array<TOKEN_KIND_ENUM>;

	public var source:String;
	public var currState:COCO_PARSER_STATE;
	public var states:Array<COCO_PARSER_STATE>;
	public var tokens:Array<TOKEN>;

	private reference var rxCRLF:RegExp;
	private reference var rxCOMMENT:RegExp;
	private reference var rxFLOAT:RegExp;
	private reference var rxNUMBER:RegExp;
	private reference var rxIDENTIFIER:RegExp;
	private reference var rxSTRING:RegExp;
	private reference var rxNewLines:RegExp;
	private reference var rxWhiteSpaceLF:RegExp;

	private var rxScanWhiteSpace:RegExp;

	/////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		HAS_COMMENTS_RULE = true;

		source = "";
		tokens = new Array<TOKEN>;
		tokenRules = new Array<TOKEN_RULE>;

		currState = new COCO_PARSER_STATE;
		states = new Array<COCO_PARSER_STATE>;
		//states.push(currState);

		// Define token regognizers precedence.
		tokenRulesPrecedence = new Array<TOKEN_KIND_ENUM>;
		tokenRulesPrecedence.push(TOKEN_OPERATOR);
		tokenRulesPrecedence.push(TOKEN_NUMBER);
		tokenRulesPrecedence.push(TOKEN_STRING);
		tokenRulesPrecedence.push(TOKEN_KEYWORD);
		tokenRulesPrecedence.push(TOKEN_IDENTIFIER);
		tokenRulesPrecedence.push(TOKEN_TEXT);

		// Define common token rules.
		// Typically a parser inherits from CocoTokenizer
		// and adds language-specific token rules.
		// See JSON Parser for more information.

		AddTokenRule("EOF", 		TOKEN_EOF,			"");
		AddTokenRule("WHITESPACE", 	TOKEN_WHITESPACE,	"^\\s+");
		AddTokenRule("NEW_LINE",	TOKEN_WHITESPACE,	"^\\n");
		AddTokenRule("CRLF",		TOKEN_WHITESPACE,	"^[\\n\\r]");
		AddTokenRule("COMMENT",		TOKEN_COMMENT,		"^\\/(?:\\*(?:[\\S\\s])*?\\*\\/|\\/.*)");
		AddTokenRule("FLOAT",		TOKEN_NUMBER, 		"^\\d+\\.(?!\\.)\\d*(?:[eE][-+]?\\d+)?|^\\d+(?:\\.\\d*)?[eE][-+]?\\d+|^\\.\\d+(?:[eE][-+]?\\d+)?");
		AddTokenRule("NUMBER",		TOKEN_NUMBER,		"^0[xX][\\da-fA-F]+|^0[0-7]*|^\\d+");

		AddTokenRule("STRING",		TOKEN_STRING,		"^\\x22(?!\\x22)(?:\\\\.|[^\\x22])*\\x22|^\\x27(?!\\x27)(?:\\\\.|[^\\x27])*\\x27|(?:^\\x22\\x22)|(?:^\\x27\\x27)");
		// String RX in C++11 on XCode throws "invalid back reference in regular expression" when adding ^([\\x27\\x22]{3})((?:(?!\\1)[\\s\\S])*)\\1|
		// This RX would match strings withing strings eg. """test""".

		AddTokenRule("IDENTIFIER",	TOKEN_IDENTIFIER,	"^[a-zA-Z_$][\\w_$]*");

		// We cache some frequently used regular expressions for speed.

		rxCRLF				= getTokenRule("CRLF").rx;
		rxCOMMENT       	= getTokenRule("COMMENT").rx;
		rxFLOAT         	= getTokenRule("FLOAT").rx;
		rxNUMBER        	= getTokenRule("NUMBER").rx;
		rxIDENTIFIER    	= getTokenRule("IDENTIFIER").rx;
		rxSTRING        	= getTokenRule("STRING").rx;
		rxWhiteSpaceLF		= getTokenRule("WHITESPACE").rx;

		rxScanWhiteSpace 	= new RegExp("^[ \\t]+");
		rxNewLines 			= new RegExp("\\n", "g");

		for(var i:Integer=0; i<4; i++)
			tokens.push(new TOKEN());
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		for(var i:Integer=tokenRules.size()-1; i>=0; i--)
			delete tokenRules[i].rx;

		delete tokenRulesPrecedence;
		delete tokens;
		delete tokenRules;
		delete currState;
		delete[] states;
		delete rxScanWhiteSpace;
		delete rxNewLines;
	}

	/////////////////////////////////////////////////////////////////////
	public function AddTokenRule(name:String, kind:TOKEN_KIND_ENUM, pattern:String)
	{
		// All regular expressions in token rules must start with ^
		if(pattern.size()>0 && pattern.charAt(0)!="^")
			pattern = "^" + pattern;

		var rule:TOKEN_RULE = new TOKEN_RULE;

		rule.name 		= name;
		rule.kind		= kind;
		rule.pattern 	= pattern;
		rule.rx 		= new RegExp(pattern);

		tokenRules.push(rule);
	}

	/////////////////////////////////////////////////////////////////////
	private function getTokenRule(name:String):TOKEN_RULE
	{
		for(var i:Integer=0; i<tokenRules.size(); i++)
		{
			if(tokenRules[i].name == name)
				return tokenRules[i];
		}
		return null;
	}

	/////////////////////////////////////////////////////////////////////
	public function save()
	{
		states.push(currState);
		currState = new COCO_PARSER_STATE(currState);
	}

	/////////////////////////////////////////////////////////////////////
	public function restore()
	{
		delete currState;
		currState = states.pop();
	}

	/////////////////////////////////////////////////////////////////////
	public function get():String
	{
		var match:Array<String>;
		var inp:String = input();
		var token:TOKEN;

		// Perform token look-ahead
		while(currState.lookahead)
		{
			--currState.lookahead;
			currState.tokenIndex = (currState.tokenIndex + 1) & 3;
			token = tokens[currState.tokenIndex];
			if((token.type != "NEWLINE") || currState.scanNewlines)
			{
				return token.type;
			}
		}

		// Ignore whitespace and comments
		for(;;)
		{
			inp = input();
			var rx:RegExp = currState.scanNewlines ? rxScanWhiteSpace : rxWhiteSpaceLF;
			match = rx.exec(inp);
			if(match)
			{
				var spaces:String = match[0];
				currState.cursor += spaces.size();
				currState.line_start += countLines(spaces);
				inp = input();
			}
			if(HAS_COMMENTS_RULE)
			{
				if(!(match = rxCOMMENT.exec(inp)))
					break;
				var comment:String = match[0];
				currState.cursor += comment.size();
				currState.line_start += countLines(comment);
			}
			else
				break;
		}

		// Get cached token or create a new one
		currState.tokenIndex = (currState.tokenIndex + 1) & 3;
		token = tokens[currState.tokenIndex];

		// If we run out of input then end.
		if(!inp)
		{
			return token.type = "EOF";
		}

		// Use token definition precedence and process token rule groups.
		var matched:Boolean = false;
		var tokendef_groups:Integer = tokenRulesPrecedence.size();
		var tokendef_rules:Integer = tokenRules.size();
		for(var i:Integer = 0; !matched && i<tokendef_groups; i++)
		{
			var filter:TOKEN_KIND_ENUM = tokenRulesPrecedence[i];

			for(var j:Integer = 0; j<tokendef_rules; j++)
			{
				var token_rule:TOKEN_RULE = tokenRules[j];
				if(token_rule.kind!=filter) continue;

				// Process token definition rule against current input.
				match = token_rule.rx.exec(inp);
				if(match)
				{
					token.type = token_rule.name;
					if(token.type=="STRING")
						token.value = match[0].substr(1, match[0].size()-2);
					else
						token.value = match[0];
					matched = true;
					break;
				}
			}
		}

		if(!matched)
		{
			if(currState.scanNewlines)
			{
				match = rxCRLF.exec(inp);
				if(match)
				{
					token.type = "NEWLINE";
				}
				else
				{
					throw "Illegal token";
				}
			}
			else
			{
				throw "Illegal token";
			}
		}

		token.start = currState.cursor;
		currState.cursor += match[0].size();
		token.end = currState.cursor;
		token.line_start = currState.line_start;
		token.line_end = currState.line_start;

		delete match;

		return token.type;
	}

	/////////////////////////////////////////////////////////////////////
	private function countLines(buff:String):Integer
	{
		var lines:Array<String> = rxNewLines.exec(buff);
		var n:Integer = lines ? lines.size() : 0;
		if(lines) delete lines;
		return n;
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function parse(source:String):CocoDOMDocument
	{
		this.source = source;
		return null;
	}

	/////////////////////////////////////////////////////////////////////
	public function NewScopeId():Integer
	{
		return (++currState.scopeId);
	}

	/////////////////////////////////////////////////////////////////////
	public function ScopeId():Integer
	{
		return (currState.scopeId);
	}

	/////////////////////////////////////////////////////////////////////
	public function input():String
	{
		return source.substring(currState.cursor);
	}

	/////////////////////////////////////////////////////////////////////
	public function done():Boolean
	{
		return peek() == "";
	}

	/////////////////////////////////////////////////////////////////////
	public function token():TOKEN
	{
		return tokens[currState.tokenIndex];
	}

	/////////////////////////////////////////////////////////////////////
	public function match(tt:String):Boolean
	{
		if(get()==tt) return true;
		unget();
		return false;
	}

	/////////////////////////////////////////////////////////////////////
	public function mustMatch(tt:String):TOKEN
	{
		if(!match(tt))
			throw "Missing " + tt;
		return token();
	}

	/////////////////////////////////////////////////////////////////////
	public function peek():String
	{
		var tt:String;
		var next:TOKEN;
		if(currState.lookahead)
		{
			next = tokens[(currState.tokenIndex + currState.lookahead) & 3];
			if(currState.scanNewlines && next.line_start != currState.line_start)
				tt = "NEWLINE";
			else
				tt = next.type;
		}
		else
		{
			tt = get();
			unget();
		}
		return tt;
	}

	/////////////////////////////////////////////////////////////////////
	public function peekOnSameLine():String
	{
		currState.scanNewlines = true;
		var tt:String = peek();
		currState.scanNewlines = false;
		return tt;
	}

	/////////////////////////////////////////////////////////////////////
	public function unget()
	{
		if(++currState.lookahead == 4) throw "PANIC: too much lookahead!";
		currState.tokenIndex = (currState.tokenIndex - 1) & 3;
	}
};

// ==================================================================================================================================
//	   ______                     _______ ____  _   ______
//	  / ____/___  _________      / / ___// __ \/ | / / __ \____ ______________  _____
//	 / /   / __ \/ ___/ __ \__  / /\__ \/ / / /  |/ / /_/ / __ `/ ___/ ___/ _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ / /_/ /___/ / /_/ / /|  / ____/ /_/ / /  (__  )  __/ /
//	\____/\____/\___/\____/\____//____/\____/_/ |_/_/    \__,_/_/  /____/\___/_/
//
// ==================================================================================================================================

export class CocoJSONParser : CocoTokenizer
{
	/////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		// JSON needs the additional token rules:

		HAS_COMMENTS_RULE = false;

		AddTokenRule("COLON",			TOKEN_OPERATOR,		"^:");
		AddTokenRule("COMMA",			TOKEN_OPERATOR,		"^,");
		AddTokenRule("LEFT_BRACKET",	TOKEN_OPERATOR,		"^\\[");
		AddTokenRule("LEFT_CURLY",		TOKEN_OPERATOR,		"^\\{");
		AddTokenRule("RIGHT_BRACKET",	TOKEN_OPERATOR,		"^\\]");
		AddTokenRule("RIGHT_CURLY",		TOKEN_OPERATOR,		"^\\}");
		AddTokenRule("NULL",			TOKEN_KEYWORD,		"^null");
		AddTokenRule("TRUE",			TOKEN_KEYWORD,		"^true");
		AddTokenRule("FALSE",			TOKEN_KEYWORD,		"^false");
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function parse(source:String):CocoDOMDocument
	{
		super.parse;
		var doc:CocoDOMDocument = new CocoDOMDocument();
		doc.root = CocoDOMNode(doc);
		parse_object(doc.root);
		return doc;
	}

	/////////////////////////////////////////////////////////////////////
	private function parse_object(p:CocoDOMNode)
	{
		p.setAttribute("vt", "object");
		mustMatch("LEFT_CURLY");
		for(;;)
		{
			var tt:String = peek();
			if(tt=="RIGHT_CURLY") break;

			mustMatch("STRING");
			var nodeName:String = token().value;
			var n:CocoDOMNode = new CocoDOMNode(nodeName);

			mustMatch("COLON");

			parse_value(n);
			p.appendChild(n);

			if(peek()!="COMMA")	break;
			mustMatch("COMMA");
		}
		mustMatch("RIGHT_CURLY");
	}

	/////////////////////////////////////////////////////////////////////
	private function parse_array(p:CocoDOMNode)
	{
		p.setAttribute("vt", "array");
		mustMatch("LEFT_BRACKET");
		for(var i:Integer;;i++)
		{
			var tt:String = peek();
			if(tt=="RIGHT_BRACKET") break;

			var n:CocoDOMNode = new CocoDOMNode(String(i));
			parse_value(n);
			p.appendChild(n);

			if(peek()!="COMMA")	break;
			mustMatch("COMMA");
		}
		mustMatch("RIGHT_BRACKET");
	}

	/////////////////////////////////////////////////////////////////////
	private function parse_value(p:CocoDOMNode)
	{
		var tt:String = get();
		if(tt=="STRING")
		{
			p.__nodeValue = token().value;
			p.setAttribute("vt", "string");
		}
		else if(tt=="TRUE")
		{
			p.__nodeValue = "true";
			p.setAttribute("vt", "boolean");
		}
		else if(tt=="FALSE")
		{
			p.__nodeValue = "false";
			p.setAttribute("vt", "boolean");
		}
		else if(tt=="FLOAT")
		{
			p.__nodeValue = token().value;
			p.setAttribute("vt", "float");
		}
		else if(tt=="NUMBER")
		{
			p.__nodeValue = token().value;
			p.setAttribute("vt", "number");
		}
		else if(tt=="NULL")
		{
			p.__nodeValue = "null";
			p.setAttribute("vt", "null");
		}
		else if(tt=="LEFT_CURLY")
		{
			unget();
			parse_object(p);
		}
		else if(tt=="LEFT_BRACKET")
		{
			unget();
			parse_array(p);
		}
	}
}

// ==================================================================================================================================
//	   ______                _  __ __  _____    ____
//	  / ____/___  _________ | |/ //  |/  / /   / __ \____ ______________  _____
//	 / /   / __ \/ ___/ __ \|   // /|_/ / /   / /_/ / __ `/ ___/ ___/ _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /   |/ /  / / /___/ ____/ /_/ / /  (__  )  __/ /
//	\____/\____/\___/\____/_/|_/_/  /_/_____/_/    \__,_/_/  /____/\___/_/
//
// ==================================================================================================================================

export class CocoXMLParser : CocoTokenizer
{
	/////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		AddTokenRule("OPEN_CDATA",			TOKEN_OPERATOR,		"^<\\!\\[CDATA\\[");
		AddTokenRule("CLOSE_CDATA",			TOKEN_OPERATOR,		"^\\]\\]>");
		AddTokenRule("CLOSING_TAG",			TOKEN_OPERATOR,		"^<\\/");
		AddTokenRule("PI_OPEN",				TOKEN_OPERATOR,		"^<\\?xml");
		AddTokenRule("PI_CLOSE",			TOKEN_OPERATOR,		"^\\?>");
		AddTokenRule("TAG_OPEN",			TOKEN_OPERATOR,		"^<");
		AddTokenRule("TAG_CLOSE",			TOKEN_OPERATOR,		"^>");
		AddTokenRule("EQ",					TOKEN_OPERATOR,		"^=");
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function parse(source:String):CocoDOMDocument
	{
		super.parse;
		var doc:CocoDOMDocument = new CocoDOMDocument();
		doc.root = parse_tag(null);
		return doc;
	}

	/////////////////////////////////////////////////////////////////////
	private function parse_tag(p:CocoDOMNode):CocoDOMNode
	{
		var n:CocoDOMNode = null;
		var tt:String = peek();

		// Match a processing instruction
		// =======================================================

		if(tt=="PI_OPEN")
		{
			mustMatch("PI_OPEN");
			n = new CocoDOMNode("?");
			tt = peek();
			while(tt=="IDENTIFIER")
			{
				mustMatch("IDENTIFIER");
				var attrName:String = token().value;
				mustMatch("EQ");
				mustMatch("STRING");
				var attrValue:String = token().value;
				n.setAttribute(attrName, attrValue);
				tt = peek();
			}
			mustMatch("PI_CLOSE");
			delete n;
		}


		// Match a tag and attributes, eg. <DIV style="color:red">
		// =======================================================

		mustMatch("TAG_OPEN");
		mustMatch("IDENTIFIER");
		var tagName:String= token().value;
		n = new CocoDOMNode(tagName);
		tt = peek();
		while(tt=="IDENTIFIER")
		{
			mustMatch("IDENTIFIER");
			var attrName:String = token().value;
			mustMatch("EQ");
			mustMatch("STRING");
			var attrValue:String = token().value;
			n.setAttribute(attrName, attrValue);
			tt = peek();
		}
		mustMatch("TAG_CLOSE");
		var tag_end:Integer = token().end;

		// Match tag body
		// =======================================================

		tt = peek();

		// Is it a <![CDATA[]]> section?
		if(tt=="OPEN_CDATA")
		{
			mustMatch("OPEN_CDATA");
			var i:Integer = token().end;
			while(get()!="CLOSE_CDATA");
			n.__nodeValue = source.substr(i, currState.cursor-i);
		}

		// Is it a closing tag?
		else if(tt=="CLOSING_TAG")
		{
		}

		// Is it an inner node?
		else if(tt=="TAG_OPEN")
		{
			while(tt=="TAG_OPEN")
			{
				parse_tag(n);
				tt = peek();
			}
		}

		// Capture inner text
		else
		{
			while(input().charAt(0)!="<")
				currState.cursor++;
			n.__nodeValue = source.substr(tag_end, currState.cursor-tag_end);
			currState.tokenIndex=0;
			currState.lookahead=0;
		}

		// Closing tag
		mustMatch("CLOSING_TAG");
		mustMatch("IDENTIFIER");

		if(token().value!=tagName)
			throw "Invalid XML syntax";

		mustMatch("TAG_CLOSE");

		if(p)
			p.appendChild(n);

		return n;
	}
}

// ==================================================================================================================================
//	   ______                _  __ ____        __  __    ____
//	  / ____/___  _________ | |/ // __ \____ _/ /_/ /_  / __ \____ ______________  _____
//	 / /   / __ \/ ___/ __ \|   // /_/ / __ `/ __/ __ \/ /_/ / __ `/ ___/ ___/ _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /   |/ ____/ /_/ / /_/ / / / ____/ /_/ / /  (__  )  __/ /
//	\____/\____/\___/\____/_/|_/_/    \__,_/\__/_/ /_/_/    \__,_/_/  /____/\___/_/
//
// ==================================================================================================================================

export class CocoXPathParser : CocoTokenizer
{
	private reference var root:CocoDOMNode;
	private reference var result:Array<CocoDOMNode>;


	/////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		HAS_COMMENTS_RULE = false;
		result = null;

		AddTokenRule("ROOT",				TOKEN_OPERATOR,		"^\\/\\/");
		AddTokenRule("SLASH",				TOKEN_OPERATOR,		"^\\/");
		AddTokenRule("LEFT_BRACKET",		TOKEN_OPERATOR,		"^\\[");
		AddTokenRule("RIGHT_BRACKET",		TOKEN_OPERATOR,		"^\\]");
		AddTokenRule("ATTRIBUTE",			TOKEN_OPERATOR,		"^@");
		AddTokenRule("EQ",					TOKEN_OPERATOR,		"^==");
		AddTokenRule("PARENT_PATH",			TOKEN_OPERATOR,		"^\\.\\.");
		AddTokenRule("CURR_PATH",			TOKEN_OPERATOR,		"^\\.");
		AddTokenRule("ANY",					TOKEN_OPERATOR,		"^\\*");
		AddTokenRule("AND",					TOKEN_OPERATOR,		"^and");
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function select(xPath:String, root:CocoDOMNode):Array<CocoDOMNode>
	{
		delete result;
		this.root = root;
		super.parse(xPath);
		result = new Array<CocoDOMNode>;
		visit_node(root);
		return result;
	}

	/////////////////////////////////////////////////////////////////////
	/*
		Node Selection Token Rules:
		===================================
		//			Selects nodes in the document from the current node that match the selection no matter where they are
		/			Selects from the root node
		.			Selects the current node
		..			Selects the parent of the current node
		nodename	Selects all nodes with the name "nodename"
		*			Matches any element node
	*/
	private function visit_node(ctx:CocoDOMNode)
	{
		var tt:String = peek();
		if(tt=="ROOT")
		{
			mustMatch("ROOT");
			var all:Array<CocoDOMNode> = root.all();
			var L:Integer = all.size();
			for(var i:Integer = 0; i<L; i++)
			{
				save();
				visit_node(all[i]);
				restore();
			}
		}
		else if(tt=="PARENT_PATH")
		{
			mustMatch("PARENT_PATH");
			visit_node(ctx.parent);
		}
		else if(tt=="CURR_PATH")
		{
			mustMatch("CURR_PATH");
			visit_node(ctx);
		}
		else if(tt=="CURR_PATH")
		{
			mustMatch("CURR_PATH");
			visit_node(ctx);
		}
		else if(tt=="SLASH")
		{
			mustMatch("SLASH");
			visit_children(ctx);
		}
		else if(tt=="IDENTIFIER")
		{
			mustMatch("IDENTIFIER");
			if(token().value==ctx.nodeName)
				visit_node(ctx);
		}
		else if(tt=="LEFT_BRACKET")
		{
			save();
			visit_attribute(ctx);
			restore();
		}
		else if(tt=="EOF")
		{
			push_node(ctx);
		}
		else
		{
			throw "Invalid";
		}
	}

	/////////////////////////////////////////////////////////////////////
	private function visit_children(ctx:CocoDOMNode)
	{
		// We expect a nodename or an attribute filter
		var tt:String = peek();
		if(tt=="IDENTIFIER" || tt=="ANY")
		{
			mustMatch(tt);
			var anyNode:Boolean = tt=="ANY";
			var nodeName:String = token().value;
			var child:CocoDOMNode;
			var L:Integer = ctx.children.size();
			for(var i:Integer=0; i<L; i++)
			{
				child = ctx.children[i];
				if(anyNode || (child.nodeName==nodeName))
				{
					save();
					visit_node(child);
					restore();
				}
			}
		}
	}

	/////////////////////////////////////////////////////////////////////
	/*
		// Attribute Selection Token Roles:
		===================================
		@attribute	Selects attributes
		@*			Matches any attribute node

		This is a very simple attribute expression evaluator.
		It only supports [@x=v and @y=t and ...] expressions.
		At some point we need to port parser.js Expression()
		function to CocoScript.

	*/
	private function visit_attribute(ctx:CocoDOMNode)
	{
		mustMatch("LEFT_BRACKET");
		var tt:String = peek();

		while(tt!="RIGHT_BRACKET")
		{
			mustMatch("ATTRIBUTE");

			var anyAttr:Boolean = false;
			var attrName:String = "*";

			tt = peek();
			if(tt=="ANY")
			{
				mustMatch("ANY");
				anyAttr = true;
			}
			else if(tt=="IDENTIFIER")
			{
				mustMatch("IDENTIFIER");
				attrName = token().value;
			}
			else
			{
				throw "Invalid xPath: " + input();
			}

			mustMatch("EQ");
			mustMatch("STRING");

			var attrValue:String = token().value;
			var L:Integer = ctx.attributes.size();
			var attr:CocoDOMAttribute;
			var attrMatch:Boolean = false;

			for(var i:Integer = 0; i<L; i++)
			{
				attr = ctx.attributes[i];
				if(anyAttr || (attr.name==attrName))
				{
					if(attr.value == attrValue)
					{
						attrMatch = true;
						break;
					}
				}
			}

			if(!attrMatch)
			{
				// If attribute does not match immediately return
				return;
			}

			tt = peek();

			if(tt=="AND")
			{
				mustMatch("AND");
				tt = peek();
			}
		}

		mustMatch("RIGHT_BRACKET");

		if(peek()=="EOF")
			push_node(ctx);
	}

	/////////////////////////////////////////////////////////////////////
	private function push_node(n:CocoDOMNode)
	{
		if(result && result.indexOf(n)==-1)
			result.push(n);
	}
}

// ==================================================================================================================================
//	   ______                 ____  ____  __  ____   __          __
//	  / ____/___  _________  / __ \/ __ \/  |/  / | / /___  ____/ /__
//	 / /   / __ \/ ___/ __ \/ / / / / / / /|_/ /  |/ / __ \/ __  / _ \
//	/ /___/ /_/ / /__/ /_/ / /_/ / /_/ / /  / / /|  / /_/ / /_/ /  __/
//	\____/\____/\___/\____/_____/\____/_/  /_/_/ |_/\____/\__,_/\___/
//
// ==================================================================================================================================

///////////////////////////////////////////////////////////////////////////////////////////////////
export struct CocoDOMAttribute
{
	name:String;
	value:String;
}

///////////////////////////////////////////////////////////////////////////////////////////////////
export class CocoDOMNode
{
	public reference var parent:CocoDOMNode;
	public var nodeName:String;
	public var children:Array<CocoDOMNode>;
	public var attributes:Array<CocoDOMAttribute>;

	public var __json_value_hack:Boolean;
	public var __nodeValue:String;

	protected var out:Array<String>;

	/////////////////////////////////////////////////////////////////////
	public function Constructor(name:String)
	{
		__json_value_hack = true;
		__nodeValue = "null";
		nodeName = name;
		children = new Array<CocoDOMNode>;
		attributes = new Array<CocoDOMAttribute>;
		out = null;
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete[] children;
		delete[] attributes;
		delete out;
	}

	/////////////////////////////////////////////////////////////////////
	public function appendChild(node:CocoDOMNode):CocoDOMNode
	{
		var L:Integer = children.size();
		for(var i:Integer = 0; i<L; i++)
		{
			if(children[i] == node)
			{
				return node;
			}
		}
		node.parent = this;
		children.push(node);
		return node;
	}

	/////////////////////////////////////////////////////////////////////
	public function removeChild(node:CocoDOMNode):CocoDOMNode
	{
		var L:Integer = children.size();
		for(var i:Integer = 0; i<L; i++)
		{
			if(children[i] == node)
			{
				children.splice(i,1);
				node.parent = null;
				return node;
			}
		}
		return null;
	}

	/////////////////////////////////////////////////////////////////////
	public function setAttribute(name:String, value:String)
	{
		var L:Integer = attributes.size();
		for(var i:Integer = 0; i<L; i++)
		{
			if(attributes[i].name == name)
			{
				attributes[i].value = value;
				return;
			}
		}
		var attr:CocoDOMAttribute = new CocoDOMAttribute();
		attr.name = name;
		attr.value = value;
		attributes.push(attr);
	}

	/////////////////////////////////////////////////////////////////////
	public function getAttribute(name:String):String
	{
		var L:Integer = attributes.size();
		for(var i:Integer = 0; i<L; i++)
		{
			if(attributes[i].name == name)
			{
				return attributes[i].value;
			}
		}
		return "";
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function all():Array<CocoDOMNode>
	{
		var arr:Array<CocoDOMNode> = new Array<CocoDOMNode>;
		node_all(this, arr);
		return arr;
	}

	/////////////////////////////////////////////////////////////////////
	protected virtual function node_all(n:CocoDOMNode, arr:Array<CocoDOMNode>)
	{
		if(!n || !n.children) return;
		arr.push(n);
		var L:Integer = n.children.size();
		for(var i:Integer = 0; i<L; i++)
			node_all(n.children[i], arr);
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function selectSingleNode(xPath:String):CocoDOMNode
	{
		var n:CocoDOMNode = null;
		var xp:CocoXPathParser = new CocoXPathParser();
		var sel:Array<CocoDOMNode> = xp.select(xPath, this);
		if(sel && sel.size()>0)
		{
			n = sel[0];
			sel.splice(0,1);

			// Delete the array but not its items
			delete sel;
		}
		delete xp;
		return n;
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function selectNodes(xPath:String):Array<CocoDOMNode>
	{
		var xp:CocoXPathParser = new CocoXPathParser();
		var sel:Array<CocoDOMNode> = xp.select(xPath, this);
		delete xp;
		return sel;
	}

	/////////////////////////////////////////////////////////////////////
	public property nodeValue
	{
		function get():String
		{
			if(!__json_value_hack)
				return __nodeValue;

			if(children.size()==0)
			{
				return __nodeValue;
			}
			else
			{
				return toJSON();
			}
		}

		function set(v:String)
		{
			if(!__json_value_hack)
			{
				__nodeValue = v;
				return;
			}

			// Detect arbitrary JSON object in node value
			if(v.charAt(0)=="{" && v.charAt(v.size()-1)=="}")
			{
				// Parse JSON
				var parser:CocoJSONParser = new CocoJSONParser;
				var dom:CocoDOMDocument = parser.parse(v);

				// Appedn document fragment to this node
				delete[] children;
				children = dom.children;
				dom.children = null;

				// Dispose parser and document fragment
				delete dom;
				delete parser;
			}
			else
			{
				__nodeValue = v;
			}
		}
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function toJSON():String
	{
		out = new Array<String>;
		nodeJSON(this, true, true, 0);
		var buff:String = out.join("\n");
		delete out;
		return buff;
	}

	/////////////////////////////////////////////////////////////////////
	protected virtual function nodeJSON(n:CocoDOMNode, list_final:Boolean, array_item:Boolean, tabs:Integer)
	{
		var A:Integer = n.attributes.size();
		var L:Integer = n.children.size();
		var i:Integer;
		var t:String = "";
		var attrs:String = "";
		var json:String = "";
		var Q:String = "\"";
		var V:String = "";

		if(n.nodeName == "CData" && !n.__nodeValue)
			n.__nodeValue = "null";

		for(i=0; i<tabs; i++) { t += "\t"; }

		if(L==0)
		{
			V = n.__nodeValue == "null" ? "null" : Q + n.__nodeValue + Q;

			if(array_item)
				out.push(t + V + (list_final ? "" : ","));
			else
				out.push(t + Q + n.nodeName + Q + ":" + V + (list_final ? "" : ","));
		}
		else
		{
			if(!array_item)
				out.push(t + Q + n.nodeName + Q + ":");

			if(isFinite(n.children[0].nodeName))
			{
				out.push(t + "[");
				for(i=0; i<L; i++)
				{
					nodeJSON(n.children[i], i==L-1, true, tabs+1);
				}
				out.push(t + "]" + (list_final ? "" : ","));
			}
			else
			{
				out.push(t + "{");
				for(i=0; i<L; i++)
				{
					nodeJSON(n.children[i], i==L-1, false, tabs+1);
				}
				out.push(t + "}" + (list_final ? "" : ","));
			}
		}
	}
}

// ==================================================================================================================================
//	   ______                 ____  ____  __  _______                                        __
//	  / ____/___  _________  / __ \/ __ \/  |/  / __ \____  _______  ______ ___  ___  ____  / /_
//	 / /   / __ \/ ___/ __ \/ / / / / / / /|_/ / / / / __ \/ ___/ / / / __ `__ \/ _ \/ __ \/ __/
//	/ /___/ /_/ / /__/ /_/ / /_/ / /_/ / /  / / /_/ / /_/ / /__/ /_/ / / / / / /  __/ / / / /_
//	\____/\____/\___/\____/_____/\____/_/  /_/_____/\____/\___/\__,_/_/ /_/ /_/\___/_/ /_/\__/
//
// ==================================================================================================================================

export class CocoDOMDocument : CocoDOMNode
{
	public var root:CocoDOMNode;

	/////////////////////////////////////////////////////////////////////
	public function Constructor() : CocoDOMNode("document")
	{
		out = null;
		root = this;
	}

	/////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		if(CocoDOMNode(this)!=root)
			delete root;

		delete out;
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function all():Array<CocoDOMNode>
	{
		var arr:Array<CocoDOMNode> = new Array<CocoDOMNode>;
		node_all(root, arr);
		return arr;
	}

	/////////////////////////////////////////////////////////////////////
	protected virtual function node_all(n:CocoDOMNode, arr:Array<CocoDOMNode>)
	{
		if(!n || !n.children) return;
		arr.push(n);
		var L:Integer = n.children.size();
		for(var i:Integer = 0; i<L; i++)
			node_all(n.children[i], arr);
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function selectSingleNode(xPath:String):CocoDOMNode
	{
		var n:CocoDOMNode = null;
		var xp:CocoXPathParser = new CocoXPathParser();
		var sel:Array<CocoDOMNode> = xp.select(xPath, root);
		if(sel && sel.size()>0)
		{
			n = sel[0];
			sel.splice(0,1);

			// Delete the array but not its items
			delete sel;
		}
		delete xp;
		return n;
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function selectNodes(xPath:String):Array<CocoDOMNode>
	{
		var xp:CocoXPathParser = new CocoXPathParser();
		var sel:Array<CocoDOMNode> = xp.select(xPath, root);
		delete xp;
		return sel;
	}

	/////////////////////////////////////////////////////////////////////
	public virtual function toJSON():String
	{
		out = new Array<String>;
		nodeJSON(root, true, true, 0);
		var buff:String = out.join("\n");
		delete out;
		return buff;
	}

	/////////////////////////////////////////////////////////////////////
	public function toXML():String
	{
		out = new Array<String>;
		out.push("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n");
		nodeXML(root, 0);
		var buff:String = out.join("");
		delete out;
		return buff;
	}

	/////////////////////////////////////////////////////////////////////
	private function nodeXML(n:CocoDOMNode, tabs:Integer)
	{
		var nodeName:String = n.nodeName;
		if(isFinite(nodeName))
		{
			n.setAttribute("id", nodeName);
			nodeName = "item";
		}

		var A:Integer = n.attributes.size();
		var L:Integer = n.children.size();
		var i:Integer;
		var t:String = "";
		var attrs:String = "";

		for(i=0;i<A;i++)
			attrs += " " + n.attributes[i].name + "=\"" + n.attributes[i].value + "\"";

		for(i=0; i<tabs; i++) { t += "\t"; }
		if(L>0)
		{
			out.push(t+"<"+nodeName+attrs+">\n");
			for(var i:Integer = 0; i<L; i++)
				nodeXML(n.children[i], tabs+1);
			out.push(t+"</"+nodeName+">\n");
		}
		else if(n.__nodeValue!="")
		{
			out.push(t+"<"+nodeName+attrs+">" + n.__nodeValue + "</"+nodeName+">\n");
		}
		else
		{
			out.push(t+"<"+nodeName+attrs+"/>\n");
		}
	}
}