/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2016 www.mobilefx.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

#include "WebGLRenderingContext.jspp"

// ==================================================================================================================================
//	   ______                 ____                 __          ______            __            __  ________
//	  / ____/___  _________  / __ \___  ____  ____/ /__  _____/ ____/___  ____  / /____  _  __/ /_/ ____/ /
//	 / /   / __ \/ ___/ __ \/ /_/ / _ \/ __ \/ __  / _ \/ ___/ /   / __ \/ __ \/ __/ _ \| |/_/ __/ / __/ /
//	/ /___/ /_/ / /__/ /_/ / _, _/  __/ / / / /_/ /  __/ /  / /___/ /_/ / / / / /_/  __/>  </ /_/ /_/ / /___
//	\____/\____/\___/\____/_/ |_|\___/_/ /_/\__,_/\___/_/   \____/\____/_/ /_/\__/\___/_/|_|\__/\____/_____/
//
// ==================================================================================================================================

class CocoRenderContextGL implements ICocoRenderContext
{
	// WebGL Context
	private reference var gl:WebGLRenderingContext;

	// Matrix
	private var __modelViewMatrix:CocoMatrix;
	private var __projectionMatrix:CocoMatrix;
	private var __viewportVector:CocoVector;

	private var __modelViewMatrixCSS3:CocoMatrix;	// Used in CSS3 calculations
	private var __projectionMatrixCSS3:CocoMatrix;	// Used in CSS3 calculations

	private var maskDraw:Boolean;

	// Shaders
	private reference var activeShader:CocoShaderCommon;
	private var shaderSimple:Array<CocoShaderSimple>;
	private var shaderSimpleWithAlpha:Array<CocoShaderSimpleWithAlpha>;
	private var shaderSaturationWithAlpha:Array<CocoShaderSaturationWithAlpha>;
	private var shaderParallaxHor:Array<CocoShaderParallaxHor>;
	private var shaderBoundingBox:CocoShaderBoundingBox;

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Constructor(ctx:WebGLRenderingContext)
 	{
 		gl = ctx;

		// set the size of the drawingBuffer
		gl.canvas.width 		= Math.round(engine.device.screenWidth * engine.device.pixelRatio);
		gl.canvas.height 		= Math.round(engine.device.screenHeight * engine.device.pixelRatio);

		// set the display size of the canvas
		gl.canvas.style.width 	= String(engine.device.screenWidth)  + 'px';
		gl.canvas.style.height 	= String(engine.device.screenHeight) + 'px';
		gl.canvas.style.zIndex 	= 0;

		__modelViewMatrix = new CocoMatrix();
		__projectionMatrix = new CocoMatrix();
		__viewportVector = new CocoVector();

		__projectionMatrixCSS3 = new CocoMatrix();
		__modelViewMatrixCSS3 = new CocoMatrix();

		maskDraw = false;

		activeShader = null;

		shaderSimple = new Array<CocoShaderSimple>();
		shaderSimple.push(new CocoShaderSimple());
		shaderSimple.push(new CocoShaderSimple(true));

		shaderSimpleWithAlpha = new Array<CocoShaderSimpleWithAlpha>();
		shaderSimpleWithAlpha.push(new CocoShaderSimpleWithAlpha());
		shaderSimpleWithAlpha.push(new CocoShaderSimpleWithAlpha(true));

		shaderSaturationWithAlpha = new Array<CocoShaderSaturationWithAlpha>();
		shaderSaturationWithAlpha.push(new CocoShaderSaturationWithAlpha());
		shaderSaturationWithAlpha.push(new CocoShaderSaturationWithAlpha(true));

		shaderParallaxHor = new Array<CocoShaderParallaxHor>();
		shaderParallaxHor.push(new CocoShaderParallaxHor());
		shaderParallaxHor.push(new CocoShaderParallaxHor(true));

		shaderBoundingBox = new CocoShaderBoundingBox();
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function Destructor()
 	{
		delete __modelViewMatrix;
		delete __projectionMatrix;
		delete __projectionMatrixCSS3;
		delete __modelViewMatrixCSS3;
		delete __viewportVector;
		delete shaderSimple;
		delete shaderSimpleWithAlpha;
		delete shaderSaturationWithAlpha;
		delete shaderParallaxHor;
		delete shaderBoundingBox;
 	}

 	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function getName():String									{ return "WebGL"; };
 	public function getType():COCO_RENDERING_CONTEXT_ENUM				{ return COCO_RENDERING_CONTEXT_ENUM.COCO_RENDERING_CONTEXT_WEBGL; }
	public function getDisplayWidth():Integer							{ return Math.floor(getBufferWidth() / engine.device.pixelRatio); }
	public function getDisplayHeight():Integer							{ return Math.floor(getBufferHeight() / engine.device.pixelRatio); }
	public function getBufferWidth():Integer							{ return gl.canvas.width; }
	public function getBufferHeight():Integer							{ return gl.canvas.height; }
	public function getModelViewMatrix():CocoMatrix						{ return __modelViewMatrix; }
	public function getProjectionMatrix():CocoMatrix					{ return __projectionMatrix; }
	public function hide()												{ gl.canvas.style.visibility="hidden"; }
	public function show()												{ gl.canvas.style.visibility="visible"; }
	public function ready():Boolean										{ return true; }
	public function getHtmlElement():HTMLElement						{ return gl.canvas; }

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function cls()
	{
		__modelViewMatrix.identity();
		gl.clearColor(0,0,0,1);
 		gl.clear(gl.COLOR_BUFFER_BIT);
 		gl.stencilMask(0x00);
	}


	///////////////////////////////////////////////////////////////////////////////////////////////
	// Clip against physical pixels
	public function clip(x:Integer, y:Integer, w:Integer, h:Integer)
	{
		/*
		gl.enable(gl.SCISSOR_TEST);

		if(window.deviceRotation)
		{
			var c:Float = Math.cos(window.deviceRotation);
			var s:Float = Math.sin(window.deviceRotation);
			var xx:Float = Math.abs(c*x + s*y);
			var yy:Float = Math.abs(-s*x + c*y);
			var ww:Float = Math.abs(c*w + s*h);
			var hh:Float = Math.abs(-s*w + c*h);
			x=xx;
			y=yy;
			w=ww;
			h=hh;
		}

		gl.scissor(x*engine.device.pixelRatio, y*engine.device.pixelRatio, w*engine.device.pixelRatio, h*engine.device.pixelRatio);
		*/
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
 	public function flush()
 	{
 		gl.flush();
 	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepare(viewScale:Float)
	{
		// set the display size of the canvas.
		gl.canvas.style.width 	= String(engine.device.screenWidth) + "px";
		gl.canvas.style.height 	= String(engine.device.screenHeight) + "px";

		// set the size of the drawingBuffer
		gl.canvas.width 		= Math.round(engine.device.screenWidth * engine.device.pixelRatio);
		gl.canvas.height 		= Math.round(engine.device.screenHeight * engine.device.pixelRatio);

		// Set OpenGL Flags
		gl.enable(gl.STENCIL_TEST);
		gl.stencilFunc(gl.EQUAL, 0, 0xFF);
		gl.stencilMask(0x00);
		gl.stencilOp(gl.REPLACE, gl.KEEP, gl.KEEP);
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);

		gl.pixelStorei(gl.UNPACK_ALIGNMENT,1);
		gl.pixelStorei(gl.PACK_ALIGNMENT,1);

		// Set Alpha Blending Mode
		gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
		gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
		gl.enable(gl.BLEND);

		// Prepare orthographic projection matrix
		if(window.deviceRotation!=0)
		{
			var c:Float = Math.cos(window.deviceRotation);
			var s:Float = Math.sin(window.deviceRotation);
			var orthoWidth:Float = Math.abs(c * getBufferWidth() + s * getBufferHeight());
			var orthoHeight:Float = Math.abs(-s * getBufferWidth() + c * getBufferHeight());

			gl.viewport(0, 0, orthoWidth, orthoHeight);
			__projectionMatrix.ortho(-orthoWidth / 2.0, orthoWidth / 2.0, orthoHeight / 2.0,  -orthoHeight / 2.0, -1.0, 1.0);
			__projectionMatrix.rotateZ(-window.deviceRotation);
			__projectionMatrix.scale(viewScale*engine.device.pixelRatio, viewScale*engine.device.pixelRatio);
		}
		else
		{
			gl.viewport(0, 0, getBufferWidth(), getBufferHeight());
			__projectionMatrix.ortho(-getBufferWidth()/2.0, getBufferWidth()/2.0, getBufferHeight()/2.0, -getBufferHeight()/2.0, -1.0, 1.0);
			__projectionMatrix.scale(viewScale*engine.device.pixelRatio, viewScale*engine.device.pixelRatio);

			__projectionMatrixCSS3.identity();
			__projectionMatrixCSS3.translate(getDisplayWidth()/2.0, getDisplayHeight()/2.0);
			__projectionMatrixCSS3.scale(viewScale, viewScale);
		}

		// Initialize Model View Matrix
		__modelViewMatrix.identity();

		// Initialize Viewport Vector
		__viewportVector.reset(-(getBufferWidth() / 2.0) / viewScale, getBufferWidth() / 2.0 / viewScale, getBufferHeight() / 2.0 / viewScale, -(getBufferHeight() / 2.0 / viewScale));

		// Initialize Shaders
		shaderBoundingBox.initialize(gl, __projectionMatrix);
		shaderSimple[0].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderSimple[1].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderSimpleWithAlpha[0].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderSimpleWithAlpha[1].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderSaturationWithAlpha[0].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderSaturationWithAlpha[1].initialize(gl, __projectionMatrix, __modelViewMatrix);
		shaderParallaxHor[0].initialize(gl, __projectionMatrix, __modelViewMatrix, __viewportVector);
		shaderParallaxHor[1].initialize(gl, __projectionMatrix, __modelViewMatrix, __viewportVector);

		// Set Active Shader
		activeShader = shaderSimple[0];
		activeShader.begin(gl);

		// Print out a device report
		engine.device.report();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareVideoFrame(image:CocoImage, video:HTMLVideoElement):CocoImage
	{
		if(!video) return null;
		if(!image) image = new CocoImage();
		if(!image.renderData)
		{
			var data:CocoImageRenderDataGL = new CocoImageRenderDataGL();
			data.gl = gl;
			var w2:Float = video.width / 2.0;
			var h2:Float = video.height / 2.0;
			var pw:Integer = CocoGraphics.POT(video.width);
			var ph:Integer = CocoGraphics.POT(video.height);
			var tw:Float = video.width / pw;
			var th:Float = video.height / ph;
			image.texSize = new Float32Array([0.0, 0.0, tw, th]);
			data.texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D, data.texture);
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pw, ph, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
			gl.bindTexture(gl.TEXTURE_2D, null);
			data.drawType = gl.TRIANGLE_STRIP;
			data.vertexCount = 4;
			data.buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER, data.buffer);
			gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 0.0, 0.0, -w2, -h2, 0.0, 0.0, 0.0, 1.0, -w2, h2, 0.0, 0.0, 1.0, 0.0, w2, -h2, 0.0, 0.0, 1.0, 1.0, w2, h2]), gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER, null);
			image.renderData = data;
		}
		var data:CocoImageRenderDataGL = CocoImageRenderDataGL(image.renderData);
		gl.bindTexture(gl.TEXTURE_2D, data.texture);
		gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, video);
		gl.bindTexture(gl.TEXTURE_2D, null);
		return image;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareImage(img:CocoImage):ICocoImageRenderData
	{
		if(!img || !img.hImage)
			return null;

		// Create an Image Rendering Data structure.
		var data:CocoImageRenderDataGL = new CocoImageRenderDataGL();

		// Keep WebGLRenderingContext on Image Rendering Data for deleting the texture
		data.gl = gl;

		var w2:Float = (img.textureCellWidth / 2.0) / img.pixelRatio;
		var h2:Float = (img.textureCellHeight / 2.0) / img.pixelRatio;

		// Apply image scaling
		img.resizeToOptimalTextureSize();

		// Adjust image size to design-time viewport and take into account texture scaling.
		var ox:Float = (img.binpackX / img.hImage.naturalWidth);
		var oy:Float = (img.binpackY / img.hImage.naturalHeight);
		var tx:Float = (img.textureCellWidth / img.hImage.naturalWidth);
		var ty:Float = (img.textureCellHeight / img.hImage.naturalHeight);
		var texData:Float32Array = null;

		if(img.binpack)
		{
			data.texture = img.binpack.renderData.castRenderDataGL().texture;
		}
		else
		{
			data.texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D, data.texture);

			// Create Texture from HTML Image
			gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.BGRA, gl.UNSIGNED_BYTE, img.hImage);
			if(gl.getError()!=0) trace("ERROR: CocoRenderContextGL::prepareImage() gl.texImage2D failed for image " + img.symbolName);

			// Instruct WebGL how to wrap the texture.
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);

			// Generate Texture FROM iMAGE
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);
			gl.generateMipmap(gl.TEXTURE_2D);

			if(gl.getError()!=0) trace("ERROR: CocoRenderContextGL::prepareImage() gl.generateMipmap failed for image " + img.symbolName);

			// Unbind Texture
			gl.bindTexture(gl.TEXTURE_2D, null);
		}

		if(img.tileMap)
		{
			// Decode Compressed TiledLayer data

			img.texSize = new Float32Array([ox, oy, img.tileWidth / img.hImage.naturalWidth, img.tileHeight / img.hImage.naturalHeight]);
			var d:Array<Float> = new Array<Float>();
			//var tileCountX:Integer = img.image.naturalWidth / img.tileWidth;
			var tileCountX:Integer = img.tileMap[0];
			var tileMapCols:Integer = img.tileMap[1];
			var tileMapRows:Integer = img.tileMap[2];
			var vCount:Integer = Math.min(tileMapCols, Math.floor(img.textureCellWidth / img.tileWidth));
			var hCount:Integer = Math.min(tileMapRows, Math.floor(img.textureCellHeight / img.tileHeight));
			var tileCount:Integer = 0;
			var paddingSize:Float = img.pixelRatio;
			for(var y:Integer = hCount; y--;)
			{
				for(var x:Integer = vCount; x--;)
				{
					var idx:Integer = img.tileMap[3 + y * tileMapCols + x];
					if(idx == -1) continue;
					var texX:Float = idx % tileCountX;
					var texY:Float = Math.floor(idx / tileCountX);
					texX += (2.0 * texX + 1.0) * paddingSize / img.tileWidth;
					texY += (2.0 * texY + 1.0) * paddingSize / img.tileHeight;
					d.push(texX); d.push(texY); d.push(0.0); d.push(0.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(0.0); d.push(1.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(1.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(0.0); d.push(0.0); d.push((x + 0) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(1.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 1) * img.tileHeight - h2);
					d.push(texX); d.push(texY); d.push(1.0); d.push(0.0); d.push((x + 1) * img.tileWidth - w2); d.push((y + 0) * img.tileHeight - h2);
					++tileCount;
				}
			}
			texData = new Float32Array(d);
			data.drawType = gl.TRIANGLES;
			data.vertexCount = tileCount * 6;
		}
		else
		{
			img.texSize = new Float32Array([ox, oy, tx, ty]);

			// The fist square is the Texture and the second is the geomerty
			// Typically in Coconut2D geomerty is defined by an image.
			// This can be either a simple image texture, a sprite atlas texture or a tilemap image.
			// (see code above)
			//
			// TexData is:
			// 2 float values for Tilemap Compression texture cell coordinates
			// 2 float values for Texture Coordinates and
			// 2 float values for vertex position
			//
			//     (0,0)           (1,0)           (-W2,-H2)      (W2,-H2)
			//       +-------------+                    +-------------+
			//       |             |                    |             |
			//       |      T      |                    |      G      |
			//       |             |                    |             |
			//       +-------------+                    +-------------+
			//     (0,1)            (1,1)          (-W2,H2)        (W2,H2)
			//
			// Initial 0.0, 0.0 is reduntant
			// Triangles: V1,V2,V3 and V2,V3,V4 due to GL_TRIANGLE_STRIP

			texData = new Float32Array([0.0, 0.0, 0.0, 0.0, -w2, -h2,  0.0, 0.0, 0.0, 1.0, -w2, h2,  0.0, 0.0, 1.0, 0.0, w2, -h2,  0.0, 0.0, 1.0, 1.0, w2, h2]);

			data.drawType = gl.TRIANGLE_STRIP;
			data.vertexCount = 4;
		}

		// Set texture map to a WebGL Buffer
		data.buffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, data.buffer);
		gl.bufferData(gl.ARRAY_BUFFER, texData, gl.STATIC_DRAW);
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
		delete texData;

		// Return Rendering Data to CocoImage
		return data;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function prepareClip(clip:CocoClip)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	private function update(m:CocoMatrix, ul:WebGLUniformLocation)
	{
		if(!ul) return;
		if(m.__dirty) m.refresh();
		gl.uniformMatrix4fv(ul, false, m.__data);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function apply(clip:CocoClip, F:CocoKeyFrame, matrix:CocoMatrix)
	{
	 	if(!clip || !F || !matrix) return;

	 	if(F.x!=0 || F.y!=0) 			matrix.translate(F.x, F.y);
	 	if(F.scaleX!=1 ||F.scaleY!=1) 	matrix.scale(F.scaleX, F.scaleY);
	 	if(F.rotation!=0) 				matrix.rotateZ(F.rotation * RADIANS);
	 	if(F.pivotX!=0 || F.pivotY!=0) 	matrix.translate(-F.pivotX, -F.pivotY);

		// Popup Blocker counter-measure:
		// For Facebook/Twitter popups a clip must have a HTML5 DIV/A
		// overlay element for handling clicks and initiating popup windows.
		// We need to place this DIV/A on top of the clip.

		if(clip.__ANCHOR && matrix==__modelViewMatrix)
		{
			clip.__ANCHOR.style.opacity = F.visible ? F.alpha : 0;

			__modelViewMatrixCSS3.copyFrom(__modelViewMatrix.__m);
			__modelViewMatrixCSS3.translate(-(clip.__image.textureCellWidth/clip.__image.pixelRatio)/2, -(clip.__image.textureCellHeight/clip.__image.pixelRatio)/2);
			__modelViewMatrixCSS3.multiplyByMatrix(__projectionMatrixCSS3, true, true);
			__modelViewMatrixCSS3.__m.rc34 = 1000+clip.__zIndex;
			clip.__ANCHOR.style.webkitTransform = clip.__ANCHOR.style.transform = __modelViewMatrixCSS3.toCSS3D(true);
			clip.__ANCHOR.style.zIndex = 1000+clip.__zIndex;
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(scene:CocoScene, clip:CocoClip, image:CocoImage, keyFrame:CocoKeyFrame, textureIndex:Integer)
	{
		if(!image.renderData) return;
		if(setFilter(keyFrame.filter) || __modelViewMatrix.__dirty) update(__modelViewMatrix, activeShader.uMVMat);
		activeShader.drawFrame(gl, scene, image, textureIndex, keyFrame);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
    private function setFilter(filter:Integer) :Boolean
    {
    	var nextShader:CocoShaderCommon = activeShader;
		switch(filter)
		{
		case COCO_FILTER_ENUM.FILTER_INHERIT: nextShader = shaderSimple[maskDraw ? 1 : 0]; break;
		case COCO_FILTER_ENUM.FILTER_SIMPLE: nextShader = shaderSimple[maskDraw ? 1 : 0]; break;
		case COCO_FILTER_ENUM.FILTER_SIMPLE_WITH_ALPHA: nextShader = shaderSimpleWithAlpha[maskDraw ? 1 : 0]; break;
		case COCO_FILTER_ENUM.FILTER_SATURATION_WITH_ALPHA: nextShader = shaderSaturationWithAlpha[maskDraw ? 1 : 0]; break;
		case COCO_FILTER_ENUM.FILTER_PARALLAX_HOR: nextShader = shaderParallaxHor[maskDraw ? 1 : 0]; break;
		}
		if(nextShader != activeShader)
		{
			activeShader.end(gl);
			activeShader = nextShader;
			activeShader.begin(gl);
			return true;
		}
		return false;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskBegin()
	{
		if(maskDraw) return;
		maskDraw = true;
		gl.colorMask(false, false, false, false);
		gl.stencilMask(0xFF);
		gl.stencilFunc(gl.EQUAL, 1, 0xFF);
		gl.clear(gl.STENCIL_BUFFER_BIT);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawMaskEnd(invert:Boolean)
	{
		if(!maskDraw) return;
		maskDraw = false;
		gl.colorMask(true, true, true, true);
		gl.stencilMask(0x00);
		gl.stencilFunc(gl.EQUAL, invert ? 0 : 1, 0xFF);
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////
	public function drawBoundingBox(clip:CocoClip)
	{
		if(!clip.__hasBoundingBox) return;
		activeShader.end(gl);
		shaderBoundingBox.begin(gl);
		shaderBoundingBox.draw(gl, new Float32Array([clip.__vABS_TOP_LEFT.X, clip.__vABS_TOP_LEFT.Y, clip.__vABS_TOP_RIGHT.X, clip.__vABS_TOP_RIGHT.Y, clip.__vABS_BOTTOM_RIGHT.X, clip.__vABS_BOTTOM_RIGHT.Y, clip.__vABS_BOTTOM_LEFT.X, clip.__vABS_BOTTOM_LEFT.Y]));
		shaderBoundingBox.end(gl);
		activeShader.begin(gl);
	}
}
