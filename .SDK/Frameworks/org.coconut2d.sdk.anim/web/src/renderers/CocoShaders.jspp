/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (C) 2013-2014 www.yourcompany.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 * ***** END LICENSE BLOCK ***** */

#pragma export_native;
#pragma export_web;

// ==================================================================================================================================
//	   ______                _____ __              __
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/
//
// ==================================================================================================================================

class CocoShader
{
	public var vertex_shader:String;
	public var fragment_shader:String;
	public var program:WebGLProgram;

	public function Constructor()
	{
		 vertex_shader = "";
		 fragment_shader = "";
		 program = null;
	}

	public function Destructor()
	{
		delete program;
	}

	public virtual function init(gl:WebGLRenderingContext)
	{
		if(!vertex_shader || !fragment_shader) return;

		var vshader:WebGLShader = gl.createShader(gl.VERTEX_SHADER);
		var fshader:WebGLShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(vshader, vertex_shader);
		gl.shaderSource(fshader, fragment_shader);
		gl.compileShader(vshader);
		gl.compileShader(fshader);
		//if(!gl.getShaderParameter_boolean(vshader, gl.COMPILE_STATUS)) trace("ERROR: Could not compile vertex shader: " + gl.getShaderInfoLog(vshader));
		//if(!gl.getShaderParameter_boolean(fshader, gl.COMPILE_STATUS)) trace("ERROR: Could not compile fragment shader: " + gl.getShaderInfoLog(fshader));
		program = gl.createProgram();
		gl.attachShader(program, vshader);
		gl.attachShader(program, fshader);
		gl.linkProgram(program);
		gl.useProgram(program);
	}

	public virtual function quit(gl:WebGLRenderingContext)
	{
		if(program)
		{
			gl.deleteProgram(program);
		}
	}

	public virtual function begin(gl:WebGLRenderingContext)
	{
		gl.useProgram(program);
	}

	public virtual function end(gl:WebGLRenderingContext)
	{
		//gl.useProgram(null);
	}
}

// ==================================================================================================================================
//	   ______                _____ __              __          ____                        ___             ____
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ __ )____  __  ______  ____/ (_)___  ____ _/ __ )____  _  __
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/ __  / __ \/ / / / __ \/ __  / / __ \/ __ `/ __  / __ \| |/_/
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /  / /_/ / /_/ / /_/ / / / / /_/ / / / / / /_/ / /_/ / /_/ />  <
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/  /_____/\____/\__,_/_/ /_/\__,_/_/_/ /_/\__, /_____/\____/_/|_|
//	                                                                                             /____/
// ==================================================================================================================================

class CocoShaderBoundingBox : CocoShader
{
	public var vbo:WebGLBuffer;
	public var iVecCoords:Integer;
	public var uProjMat:WebGLUniformLocation;

	public function Constructor()
	{
		vertex_shader = "attribute vec2 iVecCoords;uniform mat4 uProjMat;void main(void) { gl_Position = uProjMat * vec4(iVecCoords, 0.0, 1.0);}";
		fragment_shader = "#ifdef GL_ES\nprecision lowp float;\n#endif\nvoid main(void) { gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);}";
		vbo = null;
		iVecCoords = 0;
		uProjMat = null;
	}

	public function Destructor()
	{
		delete uProjMat;
		delete vbo;
	}

	public virtual function init(gl:WebGLRenderingContext)
	{
		super.init;
		iVecCoords = gl.getAttribLocation(program, "iVecCoords");
		uProjMat = gl.getUniformLocation(program, "uProjMat");
		vbo = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
		gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]), gl.DYNAMIC_DRAW);
	}

	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix)
	{
		init(gl);
		projectionMatrix.refresh();
		gl.uniformMatrix4fv(uProjMat, false, projectionMatrix.__data);
	}

	public virtual function quit(gl:WebGLRenderingContext)
	{
		if(vbo)
		{
			gl.deleteBuffer(vbo);
			vbo = null;
		}
		super.quit;
	}

	public virtual function begin(gl:WebGLRenderingContext)
	{
		super.begin;
		gl.enableVertexAttribArray(iVecCoords);
		gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
	}

	public virtual function end(gl:WebGLRenderingContext)
	{
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
		gl.disableVertexAttribArray(iVecCoords);
		super.end;
	}

	public function draw(gl:WebGLRenderingContext, data:Float32Array)
	{
		gl.bufferSubData(gl.ARRAY_BUFFER, 0, data);
		gl.vertexAttribPointer(iVecCoords, 2, gl.FLOAT, false, 0, 0);
		gl.drawArrays(gl.LINE_LOOP, 0, 4);
	}
}

// ==================================================================================================================================
//	   ______                _____ __              __          ______
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ ____/___  ____ ___  ____ ___  ____  ____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/ /   / __ \/ __ `__ \/ __ `__ \/ __ \/ __ \
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /  / /___/ /_/ / / / / / / / / / / / /_/ / / / /
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/   \____/\____/_/ /_/ /_/_/ /_/ /_/\____/_/ /_/
//
// ==================================================================================================================================

class CocoShaderCommon : CocoShader
{
	public var iTexCoords:Integer;
	public var iVecCoords:Integer;

	public var uProjMat:WebGLUniformLocation;
	public var uMVMat:WebGLUniformLocation;

	public var uSprFrame:WebGLUniformLocation;
	public var uSprSize:WebGLUniformLocation;
	public var uSprFlip:WebGLUniformLocation;

	public var uSampler:WebGLUniformLocation;

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Constructor()
	{
		 vertex_shader = "attribute vec4 iTexCoords;attribute vec2 iVecCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec4 uSprSize;uniform vec2 uSprFrame;uniform vec2 uSprFlip;varying vec2 pTexCoord;void main(void){ gl_Position = uProjMat * uMVMat * vec4(iVecCoords.xy * uSprFlip, 0.0, 1.0); pTexCoord = vec2(((iTexCoords.x + iTexCoords.z + uSprFrame.x) * uSprSize.z + uSprSize.x), ((iTexCoords.y + iTexCoords.w + uSprFrame.y) * uSprSize.w + uSprSize.y));}";
		 fragment_shader = "";

		 program = null;
		 iTexCoords = 0;
		 iVecCoords = 0;
		 uProjMat = null;
		 uMVMat = null;
		 uSprFrame = null;
		 uSprSize = null;
		 uSprFlip = null;
		 uSampler = null;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function Destructor()
	{
		delete uProjMat;
		delete uMVMat;
		delete uSprFrame;
		delete uSprSize;
		delete uSprFlip;
		delete uSampler;
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function init(gl:WebGLRenderingContext)
	{
		super.init;

		iTexCoords = gl.getAttribLocation(program, "iTexCoords");
		iVecCoords = gl.getAttribLocation(program, "iVecCoords");
		uProjMat = gl.getUniformLocation(program, "uProjMat");
		uMVMat = gl.getUniformLocation(program, "uMVMat");
		uSprFrame = gl.getUniformLocation(program, "uSprFrame");
		uSprSize = gl.getUniformLocation(program, "uSprSize");
		uSprFlip = gl.getUniformLocation(program, "uSprFlip");
		uSampler = gl.getUniformLocation(program, "uSampler");

		gl.uniform1i(uSampler, 0);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function begin(gl:WebGLRenderingContext)
	{
		super.begin;
		gl.enableVertexAttribArray(iVecCoords);
		gl.enableVertexAttribArray(iTexCoords);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public function drawFrame(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
		var data:CocoImageRenderDataGL = CocoImageRenderDataGL(image.renderData);

		// Image coords inside POT texture: array of [tx/pot_w, ty/pot_h, tw/pot_w, th/pot_h]
		gl.uniform4fv(uSprSize, image.texSize);

		// Sequence R,C inside above image
		gl.uniform2f(uSprFrame, image.textureGrid[frame * 2 + 1], image.textureGrid[frame * 2]); // Pass R,C of sequence frame

		// Image flip array [horiz flip, vert flip]
		gl.uniform2f(uSprFlip, (KF.flipH ? -1.0 : 1.0), (KF.flipV ? -1.0 : 1.0));

		// Bind texture data and geometry
		gl.bindBuffer(gl.ARRAY_BUFFER, data.buffer);

		// Instruct OpenGL that iTexCoords should be read from the buffer avove.
		// iTextCoords is an array of 4 floats and we read them from the buffer above starting at offset 0 and stride is 24 bytes
		// (FLOAT BYTES (4) * 6 (4 for TexCoords + 2 for Vertex Positions)
		gl.vertexAttribPointer(iTexCoords, 4, gl.FLOAT, false, 24, 0);

		// Instruct OpenGL that iVecCoords should be read from the buffer avove.
		// iVecCoords is an array of 2 floats and we read them from the buffer above starting at offset 16 and stride is 24 bytes
		gl.vertexAttribPointer(iVecCoords, 2, gl.FLOAT, false, 24, 16);

		// Bind the texture
		gl.bindTexture(gl.TEXTURE_2D, data.texture);

		// Load shader values from Coconut2D Clip, TweenFrame, etc.
		updateValues(gl, scene, image, frame, KF);

		// Finally draw!!
		gl.drawArrays(data.drawType, 0, data.vertexCount);

		// Unbind buffer
		gl.bindBuffer(gl.ARRAY_BUFFER, null);
	}

	///////////////////////////////////////////////////////////////////////////////////////////////
	public virtual function end(gl:WebGLRenderingContext)
	{
		gl.disableVertexAttribArray(iTexCoords);
		gl.disableVertexAttribArray(iVecCoords);
		super.end;
	}
}

// ==================================================================================================================================
//	   ______                _____ __              __          _____ _                 __
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ ___/(_)___ ___  ____  / /__
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/\__ \/ / __ `__ \/ __ \/ / _ \
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /   ___/ / / / / / / / /_/ / /  __/
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/   /____/_/_/ /_/ /_/ .___/_/\___/
//	                                                                        /_/
// ==================================================================================================================================

class CocoShaderSimple : CocoShaderCommon
{
	public function Constructor(optional discard:Boolean)
	{
		fragment_shader = "#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform sampler2D uSampler;\nvarying vec2 pTexCoord; \n \nvoid main(void)\n{\n gl_FragColor = texture2D(uSampler, pTexCoord); " + (discard ? "if(gl_FragColor.a < 0.005) discard;" : "") + "}";
	}

	public function Destructor()
	{
	}

	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix)
	{
		init(gl);
		projectionMatrix.refresh();
		modelviewMatrix.refresh();
		gl.uniformMatrix4fv(uProjMat, false, projectionMatrix.__data);
		gl.uniformMatrix4fv(uMVMat, false, modelviewMatrix.__data);
	}

	public virtual function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
	}
}

// ==================================================================================================================================
//	   ______                _____ __              __          _____ _                 __   _       ___ __  __    ___    __      __
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ ___/(_)___ ___  ____  / /__| |     / (_) /_/ /_  /   |  / /___  / /_  ____ _
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/\__ \/ / __ `__ \/ __ \/ / _ \ | /| / / / __/ __ \/ /| | / / __ \/ __ \/ __ `/
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /   ___/ / / / / / / / /_/ / /  __/ |/ |/ / / /_/ / / / ___ |/ / /_/ / / / / /_/ /
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/   /____/_/_/ /_/ /_/ .___/_/\___/|__/|__/_/\__/_/ /_/_/  |_/_/ .___/_/ /_/\__,_/
//	                                                                        /_/                                       /_/
// ==================================================================================================================================

class CocoShaderSimpleWithAlpha : CocoShaderCommon
{
	public var uAlpha:WebGLUniformLocation;

	public function Constructor(optional discard:Boolean)
	{
		fragment_shader = "#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform sampler2D uSampler;\nuniform float uAlpha;\nvarying vec2 pTexCoord; \n \nvoid main(void)\n{\n vec4 texColor = texture2D(uSampler, pTexCoord);\n gl_FragColor = vec4(texColor.rgb, texColor.a * uAlpha); " + (discard ? "if(gl_FragColor.a < 0.005) discard;" : "") + "}";
		uAlpha = null;
	}

	public function Destructor()
	{
		delete uAlpha;
	}

	public virtual function init(gl:WebGLRenderingContext)
	{
		super.init(gl);
		uAlpha = gl.getUniformLocation(program, "uAlpha");
	}

	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix)
	{
		init(gl);
		projectionMatrix.refresh();
		modelviewMatrix.refresh();
		gl.uniformMatrix4fv(uProjMat, false, projectionMatrix.__data);
		gl.uniformMatrix4fv(uMVMat, false, modelviewMatrix.__data);
	}

	public virtual function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
		gl.uniform1f(uAlpha, KF.alpha);
	}
}


// ==================================================================================================================================
//	   ______                _____ __              __          _____       __                   __  _           _       ___ __  __    ___    __      __
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ ___/____ _/ /___  ___________ _/ /_(_)___  ____| |     / (_) /_/ /_  /   |  / /___  / /_  ____ _
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/\__ \/ __ `/ __/ / / / ___/ __ `/ __/ / __ \/ __ \ | /| / / / __/ __ \/ /| | / / __ \/ __ \/ __ `/
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /   ___/ / /_/ / /_/ /_/ / /  / /_/ / /_/ / /_/ / / / / |/ |/ / / /_/ / / / ___ |/ / /_/ / / / / /_/ /
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/   /____/\__,_/\__/\__,_/_/   \__,_/\__/_/\____/_/ /_/|__/|__/_/\__/_/ /_/_/  |_/_/ .___/_/ /_/\__,_/
//	                                                                                                                                      /_/
// ==================================================================================================================================

class CocoShaderSaturationWithAlpha : CocoShaderCommon
{
	public var uColor:WebGLUniformLocation;

	public function Constructor(optional discard:Boolean)
	{
		fragment_shader = "#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform sampler2D uSampler;\nuniform vec4 uColor;\nvarying vec2 pTexCoord; \n \nvoid main(void)\n{\n vec4 texColor = texture2D(uSampler, pTexCoord);\n float c = (texColor.r + texColor.g + texColor.b) / 3.0; \n gl_FragColor = vec4((1.0 - uColor.r) * c + texColor.r * uColor.r, (1.0 - uColor.g) * c + texColor.g * uColor.g, (1.0 - uColor.b) * c + texColor.b * uColor.b, texColor.a * uColor.a); " + (discard ? "if(gl_FragColor.a < 0.005) discard;" : "") + "}";
		uColor = null;
	}

	public function Destructor()
	{
		delete uColor;
	}

	public virtual function init(gl:WebGLRenderingContext)
	{
		super.init(gl);
		uColor = gl.getUniformLocation(program, "uColor");
	}

	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix)
	{
		init(gl);
		projectionMatrix.refresh();
		modelviewMatrix.refresh();
		gl.uniformMatrix4fv(uProjMat, false, projectionMatrix.__data);
		gl.uniformMatrix4fv(uMVMat, false, modelviewMatrix.__data);
	}

	public virtual function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
		gl.uniform4f(uColor, KF.red, KF.green, KF.blue, KF.alpha);
	}
}


// ==================================================================================================================================
//	   ______                _____ __              __          ____                   ____           __  __
//	  / ____/___  _________ / ___// /_  ____ _____/ /__  _____/ __ \____ __________ _/ / /___ __  __/ / / /___  _____
//	 / /   / __ \/ ___/ __ \\__ \/ __ \/ __ `/ __  / _ \/ ___/ /_/ / __ `/ ___/ __ `/ / / __ `/ |/_/ /_/ / __ \/ ___/
//	/ /___/ /_/ / /__/ /_/ /__/ / / / / /_/ / /_/ /  __/ /  / ____/ /_/ / /  / /_/ / / / /_/ />  </ __  / /_/ / /
//	\____/\____/\___/\____/____/_/ /_/\__,_/\__,_/\___/_/  /_/    \__,_/_/   \__,_/_/_/\__,_/_/|_/_/ /_/\____/_/
//
// ==================================================================================================================================

class CocoShaderParallaxHor : CocoShaderCommon
{
	public var uTextureSize:WebGLUniformLocation;
	public var uDelta:WebGLUniformLocation;
	public var uViewport:WebGLUniformLocation;

	public function Constructor(optional discard:Boolean)
	{
		vertex_shader = "attribute vec4 iTexCoords;attribute vec2 iVecCoords;uniform mat4 uProjMat;uniform mat4 uMVMat;uniform vec2 uSprSize;uniform vec2 uSprFrame;uniform vec2 uSprFlip;uniform vec4 uDelta;uniform vec4 uTextureSize;uniform vec4 uViewport;varying vec2 pTexCoord;void main(void){ vec4 viewPos = uMVMat * (vec4(iVecCoords * uSprFlip, 0.0, 1.0) - vec4(uDelta.x * uTextureSize.z, 0.0, 0.0, 0.0)); float texWidth = (uMVMat * vec4(uTextureSize.x, 0.0, 0.0, 0.0)).x; float imgWidth = (uMVMat * vec4(uTextureSize.z, 0.0, 0.0, 0.0)).x; viewPos.x += step(viewPos.x, uViewport.x - texWidth * (1.0 - iTexCoords.z)) * imgWidth; gl_Position = uProjMat * viewPos; pTexCoord = vec2(((iTexCoords.x + iTexCoords.z + uSprFrame.x) * uSprSize.x), ((iTexCoords.y + iTexCoords.w + uSprFrame.y) * uSprSize.y));}";
		fragment_shader = "#ifdef GL_ES\nprecision lowp float;\n#endif\nuniform sampler2D uSampler;\nvarying vec2 pTexCoord; \n \nvoid main(void)\n{\n gl_FragColor = texture2D(uSampler, pTexCoord); " + (discard ? "if(gl_FragColor.a < 0.005) discard;" : "") + "}";
		uDelta = null;
		uTextureSize = null;
		uViewport = null;
	}

	public function Destructor()
	{
		delete uDelta;
		delete uTextureSize;
		delete uViewport;
	}

	public virtual function init(gl:WebGLRenderingContext)
	{
		super.init(gl);
		uDelta = gl.getUniformLocation(program, "uDelta");
		uTextureSize = gl.getUniformLocation(program, "uTextureSize");
		uViewport = gl.getUniformLocation(program, "uViewport");
	}

	public function initialize(gl:WebGLRenderingContext, projectionMatrix:CocoMatrix, modelviewMatrix:CocoMatrix, viewportVector:CocoVector)
	{
		init(gl);
		projectionMatrix.refresh();
		modelviewMatrix.refresh();
		gl.uniformMatrix4fv(uProjMat, false, projectionMatrix.__data);
		gl.uniformMatrix4fv(uMVMat, false, modelviewMatrix.__data);
		gl.uniform4f(uViewport, viewportVector.X, viewportVector.Y, viewportVector.Z, viewportVector.W);
	}

	public virtual function updateValues(gl:WebGLRenderingContext, scene:CocoScene, image:CocoImage, frame:Integer, KF:CocoKeyFrame)
	{
		gl.uniform4f(uDelta, KF.red, KF.green, KF.blue, KF.alpha);
		gl.uniform4f(uTextureSize, image.tileWidth ? image.tileWidth : image.textureCellWidth, image.tileHeight ? image.tileHeight : image.textureCellHeight, image.textureCellWidth, image.textureCellHeight);
	}
}
